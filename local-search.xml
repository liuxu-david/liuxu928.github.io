<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/ES6-ES11/"/>
    <url>/2022/03/24/ES6-ES11/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-ES11"><a href="#ES6-ES11" class="headerlink" title="ES6-ES11"></a>ES6-ES11</h1><p>ECMAScript</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>1、不能重复赋值，重复赋值会报错；</p><p>2、具有块级作用域</p><p>3、不存在变量提升</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/Ajax/"/>
    <url>/2022/03/24/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域就是浏览器的同源策略导致的，只要协议，域名，端口号，三者有一个不同就属于跨域。</p><p>同源策略是一个重要的浏览器策略，用于限制一个<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Glossary/%E6%BA%90">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：可以无刷新页面直接跟服务器进行通信。允许你根据用户事件来更新部分页面内容。</p><p>缺点：存在跨域问题，（同源策略）；没有浏览历史，不能回退，SEO（搜索引擎优化）不友好。</p><h3 id="如何解决跨域？"><a href="#如何解决跨域？" class="headerlink" title="如何解决跨域？"></a>如何解决跨域？</h3><h4 id="1、cors解决"><a href="#1、cors解决" class="headerlink" title="1、cors解决"></a>1、cors解决</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 允许跨域</span><br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br></code></pre></td></tr></table></figure><p>在node中</p><p>安装第三方中间件koa-cors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-cors&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br></code></pre></td></tr></table></figure><h4 id="2、node正向代理"><a href="#2、node正向代理" class="headerlink" title="2、node正向代理"></a>2、node正向代理</h4><p>在<code>webpack</code>中可以配置<code>proxy</code>来快速获得接口代理的能力。</p><p>vue-cli3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; <br>    <span class="hljs-attr">devServer</span>: &#123;   <br>         <span class="hljs-attr">port</span>: <span class="hljs-number">8000</span>,   <br>         <span class="hljs-attr">proxy</span>: &#123;    <br>              <span class="hljs-string">&quot;/api&quot;</span>: &#123;      <br>                  <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://localhost:8080&quot;</span>     <br>              &#125;   <br>         &#125;  &#125;&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="3、Nginx-反向代理"><a href="#3、Nginx-反向代理" class="headerlink" title="3、Nginx 反向代理"></a>3、Nginx 反向代理</h4><h4 id="4、JSONP"><a href="#4、JSONP" class="headerlink" title="4、JSONP"></a>4、JSONP</h4><h4 id="5、Websocket"><a href="#5、Websocket" class="headerlink" title="5、Websocket"></a>5、Websocket</h4><h3 id="为什么需要跨域"><a href="#为什么需要跨域" class="headerlink" title="为什么需要跨域"></a>为什么需要跨域</h3><p>跨域只存在浏览器端，而浏览器为web提供入口，我们可以在浏览器打开很多页面，所以林子大了什么都有，我们需要一个统一的规范来来保障安全性。</p><h3 id="封装步骤"><a href="#封装步骤" class="headerlink" title="封装步骤"></a>封装步骤</h3><p>1、创建对象</p><p>2、初始化，设置请求的类型和URL</p><p>3、发送请求</p><p>4、进行事件绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>       <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>);<br>       <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.result&quot;</span>);<br>       btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>           <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>           xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8080/serve?a=1&amp;b=3&amp;c=8&quot;</span>);<br>           xhr.<span class="hljs-title function_">send</span>();<br>           xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>               <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                   <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>                       <span class="hljs-comment">// 状态码</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">status</span>);<br>                       <span class="hljs-comment">// 状态字符串 ok</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">statusText</span>);<br>                       <span class="hljs-comment">// 所有响应头</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">getAllResponseHeaders</span>);<br>                       <span class="hljs-comment">// 响应体</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>);<br>                       result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>;<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;)<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>超文本传输协议</p><h4 id="请求报文："><a href="#请求报文：" class="headerlink" title="请求报文："></a>请求报文：</h4><p>请求行 ：POST  HTTP&#x2F;1.1</p><p>请求头：网址</p><p>空行</p><p>请求体：username&#x3D;liuxu&amp;&amp;password&#x3D;123456</p><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>行：HTTP  200 ok      </p><p>404:找不到</p><p>403：请求路径url错误</p><p>401：未授权</p><p>500：内部错误</p><p>头</p><p>空行</p><p>体</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/24/vue-router/"/>
    <url>/2022/03/24/vue-router/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><span id="more"></span><p>1安装vue-rouer   npm instal vue-router@4</p><p>2创建需要映射的组件</p><p>3创建router.js文件进行配置</p><p>（1）配置映射关系</p><p>（2）创建路由router</p><p>（3）导出路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About.vue&#x27;</span><br><br><br><span class="hljs-comment">// 配置映射关系</span><br><span class="hljs-keyword">const</span> routes = [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;,<br>    <span class="hljs-comment">// 网站重定向</span><br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 创建路由router</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    routes,<br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>()<br>&#125;)<br><br><span class="hljs-comment">// 导出路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>4main.js使用路由app.use(router)</p><p>5router-link和router-view（占位）</p><h3 id="router-link属性"><a href="#router-link属性" class="headerlink" title="router-link属性"></a>router-link属性</h3><p>to属性</p><p>replace属性：不能返回上一页，返回就退出</p><p>active-class可以更改class名字默认是router-link-active</p><p>exact-active-class精准匹配</p><h3 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h3><p>懒加载就是在导入组件的时候使用箭头函数的方式导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import Home from &#x27;../pages/Home.vue&#x27;</span><br><span class="hljs-comment">// import About from &#x27;../pages/About.vue&#x27;</span><br><br><br><span class="hljs-comment">// 配置映射关系</span><br><span class="hljs-keyword">const</span> routes = [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>    <span class="hljs-comment">//这就实现了路由的懒加载</span><br>            <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;home-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/Home.vue&quot;</span>)<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>            <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;abou-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/About.vue&quot;</span>)<br>    &#125;,<br>    <span class="hljs-comment">// 网站重定向</span><br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>打包的时候会命名</p><p>魔法注释&#x2F;<em>webpackChunkName:”home-chunk”</em>&#x2F;</p><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>配置中不写死</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>     <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:username/id/:id&quot;</span>,<br>     <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>         <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;abou-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/User.vue&quot;</span>)<br> &#125;,<br></code></pre></td></tr></table></figure><p>notfund页面,同样也是匹配一个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> &#123;<br>        <span class="hljs-comment">// 匹配错误网址</span><br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathmatch(.*)&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>            <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;abou-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/NotFound.vue&quot;</span>)<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>就是在index.js中配置children属性，然后配置路径。进而实现组件页面间的跳转</p><p>可以通过插槽的方式设置跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- router-link 的扩展用法 --&gt;<br>   &lt;!-- custom把a跳转去掉。设置成自定义 --&gt;<br>   &lt;!-- 通过插槽的模式 --&gt;<br>   &lt;!-- 点击自动跳转props.navigate --&gt;<br>   &lt;router-link to=&quot;/home&quot; v-slot=&quot;props&quot; custom&gt;<br>         &lt;button @click=&quot;props.navigate&quot;&gt;首页&lt;/button&gt;<br>   &lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>如果想跟组件显示加个动画，或者希望组件缓存起来就需要使用插槽方式的显示方式router-view</p><h3 id="动态添加路由"><a href="#动态添加路由" class="headerlink" title="动态添加路由"></a>动态添加路由</h3><p>拿到自己路由里面的数据方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>      <span class="hljs-comment">// vue2拿路径方法</span><br>      <span class="hljs-comment">// created()&#123;</span><br>      <span class="hljs-comment">//     console.log(this.$route.params.username);</span><br>      <span class="hljs-comment">// &#125;</span><br>      <span class="hljs-comment">// vue3拿路径方法</span><br>      <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-keyword">const</span> route=<span class="hljs-title function_">useRoute</span>();<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">username</span>);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>在跳转的时候阻止跳转进行登录的案例</p><p>进行路由跳转就跳到登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">// 导出路由</span><br>    <span class="hljs-comment">// 导航守卫</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进行了路由的跳转&quot;</span>);<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> !== <span class="hljs-string">&quot;/login&quot;</span>) &#123;<br>        <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!token) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/login&quot;</span><br>        &#125;<br>    &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>在登陆页面点击后就保存一个token，然后自动跳转到首页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;LoginClick&quot;&gt;登录&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import &#123;useRouter&#125; from &#x27;vue-router&#x27;<br>    export default &#123;<br>       setup()&#123;<br>           const router=useRouter();<br>           const LoginClick=()=&gt;&#123;<br>               window.localStorage.setItem(&quot;token&quot;,&quot;liuxu&quot;)<br>               router.push(&#123;<br>                   path:&quot;/home&quot;<br>               &#125;)<br>           &#125;<br>           return&#123;<br>               LoginClick<br>           &#125;<br>       &#125; <br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1安装npm install vuex@next</p><p>2创建store，建立js文件从vuex中导入Createstore</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>    <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">counter</span>: <span class="hljs-number">100</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>++<br>        &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>--<br>        &#125;<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>注意这里的方法传的有一个state参数，通过参数来调用数据改变</p><p>数据放到state函数中，方法放到mutations对象中</p><p>3像路由一样需要在index.js中使用，像使用插件一样</p><p>4需要先发送一个commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;<br>    &lt;button @click=&quot;decrement&quot;&gt;-1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    methods:&#123;<br>      increment()&#123;<br>        this.$store.commit(&quot;increment&quot;)<br>      &#125;,<br>      decrement()&#123;<br>        this.$store.commit(&quot;decrement&quot;)<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>再别的组件中获取是$store.state.counter</p><h3 id="5大核心"><a href="#5大核心" class="headerlink" title="5大核心"></a>5大核心</h3><p>state,getters,mutation,action,mudules</p><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>vue2用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>       <span class="hljs-comment">// 可以传个数组，也可以传个对象</span><br>       <span class="hljs-comment">// 传个对象可以改名字</span><br>       <span class="hljs-comment">// 加3个点进行解构</span><br>       ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;counter&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;height&quot;</span>])<br>       <span class="hljs-comment">// 下面传对象的</span><br>       <span class="hljs-comment">// ...mapState(&#123;</span><br>       <span class="hljs-comment">//     sCounter:state=&gt;state.counter,</span><br>       <span class="hljs-comment">//     sName:state=&gt;state.name</span><br>       <span class="hljs-comment">// &#125;)</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>vue3用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;mapState,useStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> store=<span class="hljs-title function_">useStore</span>();<br>        <span class="hljs-comment">// 这是单个获取</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Sname</span>=<span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>store.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>);<br><br>        <span class="hljs-keyword">const</span> storeStates=<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;height&quot;</span>]);<br>        <span class="hljs-keyword">const</span> storeState=&#123;&#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(storeStates));<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(storeStates).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">keyFn</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> fn=storeStates[keyFn].<span class="hljs-title function_">bind</span>(&#123;<span class="hljs-attr">$store</span>:store&#125;);<br>            storeState[keyFn]=<span class="hljs-title function_">computed</span>(fn);<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-title class_">Sname</span>,<br>            ...storeState<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h4><p>vue2是实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">import</span> &#123;mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>     <span class="hljs-comment">// vue2实现</span><br>  <span class="hljs-attr">computed</span>:&#123;<br>           ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&quot;nameInfo&quot;</span>,<span class="hljs-string">&quot;ageInfo&quot;</span>,<span class="hljs-string">&quot;heightInfo&quot;</span>]),<br>           ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>               <span class="hljs-title class_">SnameInfo</span>:<span class="hljs-string">&quot;nameInfo&quot;</span>,<br>               <span class="hljs-title class_">SageInfo</span>:<span class="hljs-string">&quot;ageInfo&quot;</span>,<br>           &#125;),<br>  &#125;,  <br> &#125;<br><br></code></pre></td></tr></table></figure><p>vue3实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../hooks/useGetters&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//    const store=useStore();</span><br>    <span class="hljs-comment">//    const nameInfo=computed(()=&gt;store.getters.nameInfo);</span><br>    <br>    <span class="hljs-keyword">const</span> stateGetters=<span class="hljs-title function_">useGetters</span>([<span class="hljs-string">&quot;nameInfo&quot;</span>,<span class="hljs-string">&quot;ageInfo&quot;</span>,<span class="hljs-string">&quot;heightInfo&quot;</span>]);<br>       <span class="hljs-keyword">return</span>&#123;<br>           ...stateGetters<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapMutation"><a href="#mapMutation" class="headerlink" title="mapMutation"></a>mapMutation</h4><p>store.commit()中可以传两个参数，一个是对应的index.js中的方法名，另一个是个对象，对象中可以传信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;hr&gt;<br>      &lt;h2&gt;当前计数：&#123;&#123;$store.state.counter&#125;&#125;&lt;/h2&gt;<br>      &lt;button @click=&quot;incrementN(10)&quot;&gt;+10&lt;/button&gt;<br>      &lt;button @click=&quot;decrementN(100)&quot;&gt;-100&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>    <br>&lt;script&gt;<br>    import &#123;useStore,mapMutations&#125; from &quot;vuex&quot;<br>    export default &#123;<br>       setup()&#123;<br>        const mutationsState=mapMutations([&quot;incrementN&quot;,&quot;decrementN&quot;]);<br><br>           return&#123;<br>              ...mutationsState<br>           &#125;<br>       &#125;,<br><br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>​     </p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/23/Flex%E5%B8%83%E5%B1%80/"/>
    <url>/2022/03/23/Flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><span id="more"></span><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li><li><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071005.png" alt="img"></li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>nowrap 不换行</p><p> wrap 换行</p><p>wrap-reverse;换行，第一行在下方。</p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>是flex-direction和flex-wrap的合并，默认是row和nowrap</p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>定义项目在主轴的对齐方式</p><ul><li><p><code>flex-start</code>（默认值）：左对齐</p></li><li><p><code>flex-end</code>：右对齐</p></li><li><p><code>center</code>： 居中</p></li><li><p><code>space-between</code>：两端对齐，项目之间的间隔都相等。</p></li><li><p><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p><p><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071010.png" alt="img"></p></li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>定义项目在交叉轴上的对齐方式</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li><li><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071011.png" alt="img"></li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li><li><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071012.png" alt="img"></li></ul><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h3><p>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0，可以为负数</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h3><p>性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h3><p>属性定义了在分配多余空间之前，项目占据的主轴空间；浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h3><p>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><ul><li><p><code>flex-start</code>：交叉轴的起点对齐。</p></li><li><p><code>flex-end</code>：交叉轴的终点对齐。</p></li><li><p><code>center</code>：交叉轴的中点对齐。</p></li><li><p><code>baseline</code>: 项目的第一行文字的基线对齐。</p></li><li><p><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p><p>·····································</p><h2 id="借鉴网站"><a href="#借鉴网站" class="headerlink" title="借鉴网站"></a>借鉴网站</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><h3 id="麻将案例"><a href="#麻将案例" class="headerlink" title="麻将案例"></a>麻将案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>麻将案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/2麻将.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bigbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box4&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box5&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box6&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box7&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box9&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-id">#bigbox</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span>&gt;<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>),<br><span class="hljs-selector-class">.box3</span>&gt;<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br><br><span class="hljs-selector-class">.box3</span>&gt;<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box4</span>,<br><span class="hljs-selector-class">.box5</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">align-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.one</span> &#123;<br>    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.box5</span> <span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">21px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box6</span>,<br><span class="hljs-selector-class">.box8</span>,<br><span class="hljs-selector-class">.box9</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">justify-content</span>: space-around;<br>    <span class="hljs-attribute">align-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span>&gt;<span class="hljs-selector-class">.two</span> &#123;<br>    <span class="hljs-comment">/* flex-basis: 100%; */</span><br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> <span class="hljs-selector-class">.two</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> <span class="hljs-selector-class">.two</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> <span class="hljs-selector-class">.two</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <url>/2022/03/21/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><span id="more"></span><p>变量提升：就是在变量还没定义之前就能访问的到</p><p>函数提升：就是在函数定义之前就可以调用执行这个函数</p><p>递归调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;gb:&quot;</span> + i);<br>       <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br>       <span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>);<br><br>       <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">i</span>) &#123;<br>           <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br>               <span class="hljs-keyword">return</span><br>           &#125;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fb:&#x27;</span> + i);<br>           <span class="hljs-title function_">foo</span>(i + <span class="hljs-number">1</span>);<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fe:&#x27;</span> + i);<br>       &#125;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ge:&#x27;</span> + i);<br>       <span class="hljs-comment">// 输出一次为</span><br>       <span class="hljs-comment">// gb: undefined</span><br>       <span class="hljs-comment">// fb: 1</span><br>       <span class="hljs-comment">// fb: 2</span><br>       <span class="hljs-comment">// fb: 3</span><br>       <span class="hljs-comment">// fe: 3</span><br>       <span class="hljs-comment">// fe: 2</span><br>       <span class="hljs-comment">// fe: 1</span><br>       <span class="hljs-comment">// ge: 1</span><br></code></pre></td></tr></table></figure><p>变量提升面试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>   <span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-title function_">fn</span>()<span class="hljs-comment">//undefined</span><br><span class="hljs-comment">// 面试1</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;<br>        <span class="hljs-keyword">var</span> a;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a);<br>        <span class="hljs-comment">// 面试2</span><br>        <span class="hljs-keyword">if</span> (!(b <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) &#123;<br>            <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>        <span class="hljs-comment">// 面试3</span><br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">c</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br>        &#125;<br>        <span class="hljs-title function_">c</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/%E9%97%AD%E5%8C%85/"/>
    <url>/2022/03/21/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><span id="more"></span><p>闭包定义：闭包是嵌套的内部函数；包含被引用变量的对象</p><p>闭包产生的条件：（1）函数嵌套（2）内部函数引用了外部函数的数据</p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>使用函数内部的变量在在函数执行完毕以后，依然存活在内存中，延长局部变量的生命周期 </p><p>让函数外部可以操作函数内部的数据 </p><h2 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h2><p>返回一个对象的函数&#x3D;&#x3D;&#x3D;》工厂函数</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>把代码分为全局区域和函数区域</p><p>好处：隔离变量，就是可以再不同的作用域定义相同的名称的变量而不冲突</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><span id="more"></span><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>每一个函数都有一个prototype属性，他默认指向一个Object空对象（即：原型对象 ）；</p><p>每个原型对象中有一个constructor属性，它指向函数对象；</p><p>给原型对象添加属性，它的实例对象也能访问</p><h2 id="显式原型和隐式原型"><a href="#显式原型和隐式原型" class="headerlink" title="显式原型和隐式原型"></a>显式原型和隐式原型</h2><p>原型就是一个公共的区域</p><p>作用：以后创建实例对象的时候，可以将这些对象公有的方法或者属性，统一添加到构造函数的原型上去，这样就不用往每个对象上都添加了，也不会影响全局作用域，而且每个对象也可以使用这些方法或者属性了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>) &#123;<br><br>       &#125;<br>       <span class="hljs-comment">// 每个函数上都有一个prototype属性， 默认值指向object空对象，即显式原型</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>       <span class="hljs-comment">// 每一个实例对象都有一个__proto__属性。默认值为构造函数的prototype的值，即隐式原型</span><br>       <span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>();<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span>);<br>       <span class="hljs-comment">// 对象的隐式原型的值等于对应的构造函数的显式原型的值</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>当我们访问对象的一个属性或者方法的时候，他会在自身中寻找，如果找到则直接使用，如果没找到就去原型对象中寻找，如果找到就直接使用，如果还没有就去原型的原型上找，直到找到Object对象的原型，这个object对象的原型没有原型，,Object对象的原型就是原型链的尽头，如果Object对象中依旧没找到，则返回是undefined(隐式原型链)</p><p>!(D:\学习资料\blog\liuxu928\source_posts\images\原型和原型链.png) </p><p><img src="/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.png"></p><p><strong>所有实例对象的隐式原型都等于其构造函数的显示原型</strong> </p><p>Function.prototype. <strong>proto</strong>  &#x3D;Object.prototype&#x3D;fn.<strong>proto</strong>.<strong>proto</strong></p><p>function Function(){}</p><p>var fn&#x3D;new Function() ；</p><p><strong>所有的函数都是Function的实例对象</strong></p><p>Function.prototype&#x3D;Function.<strong>proto</strong></p><p>在读取对象属性的时候如果没有就会去原型链上寻找，在设置对象属性的时候不会去查找原型链，如果自身没有这个属性，就直接加上这个属性</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) &#123;<br><br>      &#125;<br>      A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">n</span> = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>      A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>          <span class="hljs-attr">n</span>: <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">m</span>: <span class="hljs-number">3</span><br>      &#125;<br>      <span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">n</span>, b.<span class="hljs-property">m</span>, c.<span class="hljs-property">n</span>, c.<span class="hljs-property">m</span>); <span class="hljs-comment">//1 undefined 2 3</span><br></code></pre></td></tr></table></figure><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/19/js%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/03/19/js%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h1><span id="more"></span><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本（值）类型"><a href="#基本（值）类型" class="headerlink" title="基本（值）类型"></a>基本（值）类型</h3><p>String: 任意字符串 </p><p>number：任意数字</p><p>boolean： true&#x2F;false</p><p>undefined: undefined</p><p>null: null</p><p>symbol</p><h3 id="对象（引用）类型"><a href="#对象（引用）类型" class="headerlink" title="对象（引用）类型"></a>对象（引用）类型</h3><p>Object: 任意对象</p><p>Function： 一种特殊对象，（可以执行）</p><p>Array： 一种特殊数对象，（有数值下标属性，内部数据有序）</p><h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>typeof：返回数据类型的字符串表达；不能判断null类型和array类型</p><p>&#x3D;&#x3D;&#x3D; 只能判断undefined和null类型</p><p>instanceof  </p><h4 id="判断案例"><a href="#判断案例" class="headerlink" title="判断案例"></a>判断案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = &#123;<br>           <span class="hljs-attr">a2</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>],<br>           <span class="hljs-attr">a3</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a3&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;liuxu&#x27;</span>);<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1, <span class="hljs-keyword">typeof</span> a1 === <span class="hljs-string">&#x27;object&#x27;</span>); <span class="hljs-comment">//object true//返回的是数据类型的字符串表达形式</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); <span class="hljs-comment">//true</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1.<span class="hljs-property">a3</span>); <span class="hljs-comment">//function</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a3</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">//true</span><br>       a1.<span class="hljs-title function_">a3</span>()() <span class="hljs-comment">//liuxu</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a2</span>[<span class="hljs-number">2</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">//true</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1.<span class="hljs-property">a2</span>[<span class="hljs-number">2</span>]); <span class="hljs-comment">//&#x27;function&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="undefined和null的区别？"><a href="#undefined和null的区别？" class="headerlink" title="undefined和null的区别？"></a>undefined和null的区别？</h3><p>undefined是代表定义了但是没有赋值，null是定义并且赋值了但是赋值为null</p><h3 id="什么时候给变量赋值为null"><a href="#什么时候给变量赋值为null" class="headerlink" title="什么时候给变量赋值为null?"></a>什么时候给变量赋值为null?</h3><p>让赋值的变量成为垃圾对象被垃圾回收器回收，出事赋值表示要赋值为对象</p><h2 id="数据变量内存"><a href="#数据变量内存" class="headerlink" title="数据变量内存"></a>数据变量内存</h2><h3 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h3><p>存储在内存中代表特定信息的东西</p><p>特点：可运算，可传递</p><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>可变化的数据，由变量名和变量值组成，每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是在内存中保护的</p><h3 id="什么是内存？"><a href="#什么是内存？" class="headerlink" title="什么是内存？"></a>什么是内存？</h3><p>就是内存条通电以后产生的可以存储数据的空间</p><h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><p>内存是用来存储数据的空间，变量是内存的标识</p><h3 id="var-a-x3D-xxx-a内存中保存的到底是什么？"><a href="#var-a-x3D-xxx-a内存中保存的到底是什么？" class="headerlink" title="var a&#x3D;xxx,a内存中保存的到底是什么？"></a>var a&#x3D;xxx,a内存中保存的到底是什么？</h3><p>xxx为基本类型的时候，保存的就是这个数据</p><p>xxx为对象时，保存的就是对象的地址值</p><p>xxx为变量时，保存的可能是基本数值，也可能是对象的地址值</p><h3 id="引用赋值问题"><a href="#引用赋值问题" class="headerlink" title="引用赋值问题**"></a>引用赋值问题**</h3><p>2个引用变量指向同一个对象的时候，，一个变量修改对象的内部,另一个引用变量都能看到修改以后的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引用变量赋值</span><br>     <span class="hljs-keyword">let</span> obj1 = &#123;<br>         <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span><br>     &#125;;<br>     <span class="hljs-keyword">let</span> obj2 = obj1;<br>     obj2.<span class="hljs-property">age</span> = <span class="hljs-number">12</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">age</span>);<span class="hljs-comment">//12</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">obj</span>) &#123;<br>         obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;A&#x27;</span><br>     &#125;<br>     <span class="hljs-title function_">f1</span>(obj1);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">name</span>, <span class="hljs-string">&#x27;----&#x27;</span>);<span class="hljs-comment">//A----</span><br></code></pre></td></tr></table></figure><p>2个引用变量指向同一个对象的时候，让其中的引用变量指向另一个对象，另一个引用变量依然指向前一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-keyword">let</span> b = a;<br>a = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;BOB&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;;<br>b.<span class="hljs-property">age</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>, b.<span class="hljs-property">name</span>, a.<span class="hljs-property">age</span>); <span class="hljs-comment">//6 undefined  20</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">obj</span>) &#123;<br>    obj = &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br>&#125;<br><span class="hljs-title function_">f2</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>);<span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><h3 id="js传递变量参数时，是值传递还是引用传递？"><a href="#js传递变量参数时，是值传递还是引用传递？" class="headerlink" title="js传递变量参数时，是值传递还是引用传递？"></a>js传递变量参数时，是值传递还是引用传递？</h3><p>可能是值传递，也有可能是引用传递（地址值）也可以理解为都是值传递（基本值传递，地址值传递）</p><h3 id="js引擎如何进行内存管理"><a href="#js引擎如何进行内存管理" class="headerlink" title="js引擎如何进行内存管理"></a>js引擎如何进行内存管理</h3><p>释放内存：</p><p>局部变量：函数执行完以后自动释放；</p><p>对象：先成为垃圾对象&#x3D;&#x3D;》然后被垃圾回收器回收</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="什么是对象？为什么用"><a href="#什么是对象？为什么用" class="headerlink" title="什么是对象？为什么用"></a>什么是对象？为什么用</h3><p>拥有属性和方法的数据，用来保存多个数据的容器</p><p>统一管理多个数据</p><p>方法是特殊的属性&#x3D;&#x3D;》属性值是函数</p><h4 id="对象使用中什么时候必须使用-“属性名”-？"><a href="#对象使用中什么时候必须使用-“属性名”-？" class="headerlink" title="对象使用中什么时候必须使用[“属性名”]？"></a>对象使用中什么时候必须使用[“属性名”]？</h4><p>1属性名中包含特殊字符：- 空格</p><p>2属性名不确定</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>是什么？可以执行，实现一定功能的封装体 </p><p>为什么？提高代码的复用，便于阅读</p><p>怎么封装？函数声明，表达式</p><h4 id="什么函数是回调函数？"><a href="#什么函数是回调函数？" class="headerlink" title="什么函数是回调函数？"></a>什么函数是回调函数？</h4><p>1你定义的</p><p>2你没有调</p><p>3最终它执行了</p><p>常见回调函数&#x3D;&#x3D;&#x3D;&gt;dom事件回调函数，定时器</p><h3 id="IIFE函数"><a href="#IIFE函数" class="headerlink" title="IIFE函数"></a>IIFE函数</h3><p>匿名自调用函数（立即调用函数表达式）</p><p>作用：隐藏实现，不会污染全局命名空间，用它来编写js模块</p><h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h3><p>如果没有指定就是指window</p><p>所有函数内部都有一个变量this</p><p>它的值是调用函数的当前对象</p><h4 id="如何确定this的值？"><a href="#如何确定this的值？" class="headerlink" title="如何确定this的值？"></a>如何确定this的值？</h4><p>test()指window</p><p>p.test()指p</p><p>new test（）指新建的对象</p><p>p.call(obj)：obj</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/18/Nodejs/"/>
    <url>/2022/03/18/Nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="学习Nodejs总结"><a href="#学习Nodejs总结" class="headerlink" title="学习Nodejs总结"></a>学习Nodejs总结</h1><span id="more"></span><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><h4 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h4><p>3个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="fs-writeFile"><a href="#fs-writeFile" class="headerlink" title="fs.writeFile"></a>fs.writeFile</h4><p>3个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&quot;./files/2.txt&quot;</span>, <span class="hljs-string">&quot;正在努力中....&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入失败&quot;</span> + err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入成功&quot;</span> + dataStr);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><h4 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a>path.join</h4><p>拼接地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><br>fs.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/files/1.txt&#x27;</span>), <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span>;<br><span class="hljs-comment">// const Npath = path.basename(fpath);</span><br><span class="hljs-comment">// console.log(Npath); //index.html</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Npath</span> = path.<span class="hljs-title function_">basename</span>(fpath, <span class="hljs-string">&#x27;.html&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Npath</span>); <span class="hljs-comment">//index</span><br></code></pre></td></tr></table></figure><h4 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Npath</span> = path.<span class="hljs-title function_">extname</span>(fpath);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Npath</span>); <span class="hljs-comment">//.html</span><br></code></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="req-amp-amp-res"><a href="#req-amp-amp-res" class="headerlink" title="req&amp;&amp;res"></a>req&amp;&amp;res</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br>http.<span class="hljs-title function_">createServer</span>().<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req的url和method可以分别获取地址和请求类型</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`你的请求地址是<span class="hljs-subst">$&#123;req.url&#125;</span>,请求类型是<span class="hljs-subst">$&#123;req.method&#125;</span>`</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>    <span class="hljs-comment">// 出现中文乱码解决</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27; text/html;charset=utf-8&#x27;</span>)<br>        <span class="hljs-comment">// res.end向服务器响应一些内容，在页面中展示</span><br>    res.<span class="hljs-title function_">end</span>(str)<br><br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动127.0.0.1：8080！！&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>res.end也很重要</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h4 id="nrm-和i5ting-toc"><a href="#nrm-和i5ting-toc" class="headerlink" title="nrm,和i5ting_toc"></a>nrm,和i5ting_toc</h4><p>安装导入功能开源协议ISC</p><p>npm login</p><p>npm publish</p><p>npm unpublish baoming –force</p><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p>安装express命令 npm install <a href="mailto:&#x65;&#x78;&#112;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#46;&#49;&#x37;&#46;&#x31;">&#x65;&#x78;&#112;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#46;&#49;&#x37;&#46;&#x31;</a></p><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>安装命令npm install nodemon -g</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 定义一个全局中间件</span><br><span class="hljs-comment">// 中间件作用： 可以共享同一份req和res</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全局中间件执行了&quot;</span>);<br>    <span class="hljs-comment">// 把流转关系转交给下一个中间件或路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get /&quot;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get user&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get user&quot;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>后面中间件或者路由都能拿到共享数据req，和res</p><h4 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 局部中间件不使用app.use()</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw1</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;局部中间件执行了第一个&quot;</span>);<br>    <span class="hljs-comment">// 调用next传给下个中间件或者路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw2</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;局部中间件执行了第二个&quot;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get /&quot;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, mw1, mw2, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get user&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get user&quot;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h4><p>必须注册在所有路由之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;服务器内部发生了错误！&quot;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>&#125;)<br>/必须注册在所有路由之后<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发生了错误&quot;</span> + err.<span class="hljs-property">message</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;error&quot;</span> + err.<span class="hljs-property">message</span>)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-comment">// 使用内置中间件，可以解析json格式的数据 </span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><br><span class="hljs-comment">// 使用另一个内置中间件可以解析URL - encoded格式的请求体数据</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><h4 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用第三方组件先安装再导入</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>)<br>    <span class="hljs-comment">// 使用</span><br>app.<span class="hljs-title function_">use</span>(parser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br></code></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><h4 id="使用cors解决跨域"><a href="#使用cors解决跨域" class="headerlink" title="使用cors解决跨域"></a>使用cors解决跨域</h4><p>npm install cors</p><p>导入中间件</p><p>一定在路由之前使用app.use(cors（）)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 配置解析表单数据的中间件</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br><span class="hljs-comment">// 一定要在路由之前进行配置，解决跨域问题</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br><br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./26appRouter&#x27;</span>)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, router)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is running&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="简单请求和遇见请求区别"><a href="#简单请求和遇见请求区别" class="headerlink" title="简单请求和遇见请求区别"></a>简单请求和遇见请求区别</h4><p>简单请求只会发生一次请求</p><p>遇见请求客户端与服务器发生2次请求OPTION请求成功以后才会发起真正的请求</p><h3 id="jwt认证机制"><a href="#jwt认证机制" class="headerlink" title="jwt认证机制"></a>jwt认证机制</h3><p>npm i jsonwebtoken express-jwt</p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
