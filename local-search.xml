<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/25/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/10/25/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><span id="more"></span><h2 id="vue2和vue3的区别？"><a href="#vue2和vue3的区别？" class="headerlink" title="vue2和vue3的区别？"></a>vue2和vue3的区别？</h2><p>（1）API区别</p><p>vue2中使用的时optionAPI（选项式API）而vue3中使用的时composition API(组合式API)</p><p>（2）生命周期不同</p><p>vue2中生命周期：beforeCreate，created，beforeMount,mounted,beforeUpdate,updated,beforeDestroy,distroyed</p><p>vue3中的声明周期：setup，onBeforeMount，onMounted，onBeforeUpdate，onUpdated，onBeforeUnmount，onBeforeUnmounted</p><p>（3）数据的双向绑定</p><p>vue2中使用的时数据劫持结合发布者-订阅者模式，用object.definePropert()实现的</p><p>vue3中使用了es6后的proxy对数据进行代理，</p><p>object.definePropert()只能对对象的某个属性进行监听，不能对全对象进行监听，而且数组的新增，删除也监听不到，还需要对数组进行特异性操作，，而vue3使用proxy可以对整个对象进行数据的操作，也完美支持对数组的监听。</p><h3 id="vue的架构模式？"><a href="#vue的架构模式？" class="headerlink" title="vue的架构模式？"></a>vue的架构模式？</h3><p>不是标准的MVVM，但是官网说的是借鉴mvvm的架构模式。mvvm就是model（数据），view（视图），viewModel是数据和视图之间的桥梁，跟mvp的架构模式差不多，但是唯一的区别就是viewModel通过双向绑定的形式，来充当数据和视图之间的桥梁。</p><h3 id="谈谈mvc架构模式？"><a href="#谈谈mvc架构模式？" class="headerlink" title="谈谈mvc架构模式？"></a>谈谈mvc架构模式？</h3><p>model（数据）view（视图）controller（控制器）</p><p>数据的改变会引起视图的改变，然后视图的改变通过控制器然后对部分代码进行改变。</p><h3 id="说说对SPA单页面应用的理解？"><a href="#说说对SPA单页面应用的理解？" class="headerlink" title="说说对SPA单页面应用的理解？"></a>说说对SPA单页面应用的理解？</h3><p>单页面应用就是页面在第一次渲染的时候就加载相应的HTML，CSS，js，一旦页面加载完成不会因为用户的操作造成页面的重新加载或跳转，取而代之路由的切换来实现html内容的变化，，ui与用户的交流</p><p>利弊：</p><p>用户体验好，避免不必要的跳转，对服务器压力比较小，前后端分离，架构清晰。</p><p>第一次渲染的时候加载东西比较多，比较耗时，还有就是需要前进后退路由管理，还有就是seo难度比较大 。</p><h3 id="vue-router路由跳转模式？"><a href="#vue-router路由跳转模式？" class="headerlink" title="vue-router路由跳转模式？"></a>vue-router路由跳转模式？</h3><p>跳转模式有两种，一种是hash模式，另一种是history模式</p><p>二者的差异：history相比较hash模式更加优雅，hash模式的地址栏带的有#</p><p>hash模式是通过浏览器的onhashchange来监听地址的变化然后进行页面的切换，而history则是使用popstate（）来监听url的改变，然后通过html5新出的pushState和replaceState两个API实现页面的切换，二者都不会向浏览器发送请求。</p><p>在使用history模式的时候需要在后端配置路由重定向，因为如果进入某个路由然后重新刷新页面的时候，就会真的向服务器发起请求，然后如果不配置重定向的话就会出现404的问题，而hash模式不用配置。</p><h3 id="什么是vuex？"><a href="#什么是vuex？" class="headerlink" title="什么是vuex？"></a>什么是vuex？</h3><p>是vue开发的状态管理模式，可以共享状态，很多时候我们需要在多个组件之间进行数据的共享，比如用户的登陆状态，用户的头像之类的，所以就需要状态管理模式来管理这些状态。</p><h3 id="nextTick是什么？"><a href="#nextTick是什么？" class="headerlink" title="nextTick是什么？"></a>nextTick是什么？</h3><p>在数据发生改变使用这个方法，获取更新后的DOM</p><p>因为vue在更新DOM的时候是异步更新的，数据发生改变后页面不会立马改变，而是监听到数据的变化后开启一个队列，把所有数据的变化放在同一个事件循环中去，当同一个watcher被多次触发，那么去除重复改变的数据很重要，所以nexttick就是用来获取更新后的DOM。</p><h3 id="v-for中key的作用？"><a href="#v-for中key的作用？" class="headerlink" title="v-for中key的作用？"></a>v-for中key的作用？</h3><p>key是虚拟节点的唯一标识，它可以是diff算法更快更准确的找出可复用的节点，然后进行页面视图的更新。</p><p>一般情况 不会使用index当作key，因为在删除，增加，排序的时候就会出现一些问题</p><h3 id="ref和reactive区别？"><a href="#ref和reactive区别？" class="headerlink" title="ref和reactive区别？"></a>ref和reactive区别？</h3><p>ref可以包裹任何类型，并把包裹的类型转成响应式，</p><p>reactive只能包裹复杂数据类型，也可以把包裹的数据转成响应式；</p><p>所以ref的更能更全，更适用于任何环境，所以在开发的时候尽量选择ref；</p><h3 id="watch和watheffect区别？"><a href="#watch和watheffect区别？" class="headerlink" title="watch和watheffect区别？"></a>watch和watheffect区别？</h3><p>watch可以监听单个数据源 也可以监听多个数据源，监听多个数据源的时候第一个参数可以是数组；</p><p>还有就是watch是懒执行的，它默认第一次不会执行，除非把第三个参数immediate设置为true</p><p>watch是当依赖的数据发生改变的时候执行回调函数；</p><p>还有就是watch可以监听到数据改变前后的值</p><p>watcheffect是默认第一次就会执行一次，还有就是watcheffect会自动收集依赖，当依赖发生变化的时候会重新执行自身，还有就是不饿能获取变化前后的值。</p><h3 id="computed："><a href="#computed：" class="headerlink" title="computed："></a>computed：</h3><p>computed和watcheffect有些相似，也是当数据发生改变的时候，重新计算，进行更新，但是computed是没有值改变的时候不会调用，但是watcheffect会默认调用一次，还有就是computed更注重计算出来的结果，所以得有返回值，而watcheffect更注重过程，注重的是回调函数的函数体，所以不用写返回值。</p><h3 id="route和router区别？"><a href="#route和router区别？" class="headerlink" title="route和router区别？"></a>route和router区别？</h3><p>route是路由信息的对象，在vue3中通过useRoute来获取，包括路由信息参数。</p><p>router是路由实例对象，可以通过usreRouter来获取，包括路由的跳转方法等。</p><h3 id="组件间传值的方法"><a href="#组件间传值的方法" class="headerlink" title="组件间传值的方法"></a>组件间传值的方法</h3><p>父传子：通过props进行传递</p><p>子传父：通过$emit</p><p>eventbus事件总线的方法</p><p>父子间：v-model</p><p>ref</p><p>$attrs和$listeners</p><p>$children和$parent和$root</p><p>provide和inject</p><p>vuex</p><h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p>一个普通函数可以访问外部环境的自由变量，那么这个函数和外部的环境就形成了闭包。</p><p>从狭义上说，一个普通函数调用了外部函数的自由变量，那就形成了闭包。</p><p>闭包的应用场景：防抖和节流，立即执行函数。</p><h3 id="什么是防抖和节流？"><a href="#什么是防抖和节流？" class="headerlink" title="什么是防抖和节流？"></a>什么是防抖和节流？</h3><p>防抖：就是函数的频繁执行转化为函数的最后一次才去执行，</p><p>应用场景：搜索框搜索请求服务器，按钮的频繁点击，窗口的大小。</p><p>节流：就是函数的频繁执行转化为函数每间隔固定的时间执行一次。</p><p>应用场景：鼠标不断点击，监听滚动事件</p><h3 id="闭包的优缺点？"><a href="#闭包的优缺点？" class="headerlink" title="闭包的优缺点？"></a>闭包的优缺点？</h3><p>优点：创建的变量始终保存在内存中，防止全局变量的污染</p><p>缺点：闭包中创建的变量会始终存在内存中，垃圾回收机制不会将这些变量销毁，对内存的消耗很大，造成内存的泄露</p><h3 id="什么情况会造成内存的泄露？"><a href="#什么情况会造成内存的泄露？" class="headerlink" title="什么情况会造成内存的泄露？"></a>什么情况会造成内存的泄露？</h3><p>1.意外声明的全局变量</p><p>2.没有清除的定时器</p><p>3.没有手动接触的监听事件</p><p>4.闭包</p><h2 id="Es6之后新增了哪些属性？"><a href="#Es6之后新增了哪些属性？" class="headerlink" title="Es6之后新增了哪些属性？"></a>Es6之后新增了哪些属性？</h2><p>let，const，</p><p>箭头函数，</p><p>结构，</p><p>使用class定义类</p><p>set，map、</p><p>新增数据类型symbal，bigInt</p><h3 id="var，let-const-有什么异同？"><a href="#var，let-const-有什么异同？" class="headerlink" title="var，let,const 有什么异同？"></a>var，let,const 有什么异同？</h3><p>块级作用域：let和const有块级作用域，const没有块级作用域</p><p>变量提升：let和const没有变量提升，var有变量提升</p><p>重复定义：let和const在同一作用域下不能重复定义，var可以重复定义</p><p>更改值：let和var值可以更改，const赋值后不能更改，而且在定义的时候要赋值</p><h3 id="什么是变量提升？"><a href="#什么是变量提升？" class="headerlink" title="什么是变量提升？"></a>什么是变量提升？</h3><p>js是个单线程的语言，这执行之前会先进行解析，检测到变量或者函数的时候会自动提到作用域的前面，而且函数的提升大于变量的提升，还有就是在函数中的变量也会提到函数作用域之前，先把他们添加到内存中去，这些变量和函数声明就是真正声明之前使用。</p><h3 id="箭头函数和普通函数有什么区别？"><a href="#箭头函数和普通函数有什么区别？" class="headerlink" title="箭头函数和普通函数有什么区别？"></a>箭头函数和普通函数有什么区别？</h3><p>this的指向不同，箭头函数没有自己的this，它内部的this就是上层作用域的this，而且它的this指向不能改变。</p><p>箭头函数没有原型，箭头函数不能当成构造函数使用</p><p>箭头函数不能arguments</p><p>还有就是箭头函数中参数的名称不能重复，会报错。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>String-Number-Boolean</p><p>undefined-null</p><p>object</p><p>symbal，bigInt</p><h2 id="原型和原型链是什么？"><a href="#原型和原型链是什么？" class="headerlink" title="原型和原型链是什么？"></a>原型和原型链是什么？</h2><p>每个实例对象有一个__proto__属性，是实例对象的隐式原型，每个函数创建的时候都有一个prototype属性，是函数的显示原型，她默认指向一个Object对象。构造函数的显示原型等于实例对象的隐式原型。</p><p>当要访问一个对象的属性或者方法的时候，现在自身上寻找，如果找到直接使用，如果没找到就去原型中寻找，如果还没找到就到原型的原型对象上找，直到找到object空对象的原型，object空对象的原型就是原型链的尽头，如果还没找到就返回undefined，这就是对原型链的理解。</p><h2 id="什么是事件循环？"><a href="#什么是事件循环？" class="headerlink" title="什么是事件循环？"></a>什么是事件循环？</h2><p>浏览器在渲染主线程的时候会进入无限循环，循环每次都会判断时间队列中是否存在任务，如果存在任务，就直接取出第一个执行，然后进入下一次循环，如果没有任务，渲染主进程就会进入休眠的状态，其他任务也可以不断的向消息队列进行添加，添加到消息队列的末尾 ，如果主进程处于休眠状态，那么就会唤醒主进程，还有一些异步事件，比如定时器，网络请求，当主进程执行到这些异步任务的时候，会将他们交给计时线程，计时线程结束后会重新交给消息对列。这就是事件循环。</p><h2 id="url输入到地址栏后发生了什么？"><a href="#url输入到地址栏后发生了什么？" class="headerlink" title="url输入到地址栏后发生了什么？"></a>url输入到地址栏后发生了什么？</h2><p>首先url输入到地址栏，浏览器会检查url输入是否合法，然后检查是否完整，如果不完整然后就会随机补上后缀，然后就是进行DNS解析，DNS解析出IP地址，然后找对IP地址对应的服务器，然后进行TCP连接，然后发起http&#x2F;https请求，完成TCP的三次握手，服务器会相应请求，通常是一个html的文件，然后浏览器进行解析渲染页面，处理HTML生成DOM树，css生成CSSOM树，然后二者结合生成render渲染树，然后再根据位置大小进行layout布局，然后在进行paint绘制，然后就渲染到页面了，然后http请求结束，断开TCP链接。</p><h2 id="回流和重绘是什么"><a href="#回流和重绘是什么" class="headerlink" title="回流和重绘是什么"></a>回流和重绘是什么</h2><p>回流主要是在layout布局阶段，元素的大小位置发生变化，重新计算进行布局，这个变化就是回流。</p><p>重绘主要发生在paint绘制阶段，元素的样式发生了变化，这个变化就是重绘</p><p>回流一定会引起重绘，重绘不一定会引起回流。</p><h2 id="怎样减少首页白屏的时间"><a href="#怎样减少首页白屏的时间" class="headerlink" title="怎样减少首页白屏的时间?"></a>怎样减少首页白屏的时间?</h2><p>图片使用懒加载，图片较多的时候使用雪碧图。</p><p>把第三方包放入到index.html文件中，并引入CDN加速。</p><p>路由使用懒加载</p><p>还有就是第三方包可以按需引入</p><p>还有就是代码方面v-if和v-show使用的场景选择</p><p>还有就是webpack对图片进行压缩</p><h2 id="解决跨域的方法？"><a href="#解决跨域的方法？" class="headerlink" title="解决跨域的方法？"></a>解决跨域的方法？</h2><p>jsonp的方式</p><p>后端通过cors解决方案</p><p>nginx反向代理的方式</p><p>在node中使用第三方中间件</p><p>服务器代理proxy</p><p>通过document.domain来跨子域</p><p>window.name</p><p>window.postMessage()方法</p><h2 id="什么是纯函数？"><a href="#什么是纯函数？" class="headerlink" title="什么是纯函数？"></a>什么是纯函数？</h2><p>确定的输入就会有确定的输出，外部环境的任何变化都不会影响函数内部产生的结果，而且不会产生副作用，这就是纯函数。</p><h2 id="什么是函数的柯里化？有什么作用？"><a href="#什么是函数的柯里化？有什么作用？" class="headerlink" title="什么是函数的柯里化？有什么作用？"></a>什么是函数的柯里化？有什么作用？</h2><p>函数的柯里化就是将传入多个参数的函数转化成传入单个参数的函数并且返回一个函数用于接收剩下的函数，每一层函数都接收一个参数并进行处理。</p><p>作用：职责明确，每个函数只传入一个参数做处理，职责明确，还有就是可以拿到每一层函数的返回值作为一个新的函数，可以复用传入的参数。</p><h2 id="http和https的区别？"><a href="#http和https的区别？" class="headerlink" title="http和https的区别？"></a>http和https的区别？</h2><p>http是超文本传输协议，传输信息的时候是明文传输，而https使用ssl加密的方式传输数据，https比http协议安全</p><p>https还需要申请CA证书，一般是需要一定费用的。</p><p>端口号：http默认的端口号是80，https默认的端口号是443</p><h2 id="什么是虚拟DOM-？"><a href="#什么是虚拟DOM-？" class="headerlink" title="什么是虚拟DOM ？"></a>什么是虚拟DOM ？</h2><p>虚拟dom就是一个普通的js对象，它就是对真实DOM信息和结构的的描述。因为操作真实的DOM操作很慢，而且轻微的操作都可能引起页面的重新排版，非常消耗性能，所以出现了虚拟DOM。</p><h2 id="项目优化？"><a href="#项目优化？" class="headerlink" title="项目优化？"></a>项目优化？</h2><p>1.图片的优化：减少图片的请求，使用雪碧图。</p><p>还有就是图片可以使用webpack插件压缩</p><p>图片还可以使用懒加载</p><p>2，页面优化：路由懒加载，</p><p>3，代码优化：v-if和v-show根据场景进行使用，v-for必须加上key，而且避免使用和v-if一起使用</p><p>还有就是高频触发使用防抖和节流。</p><p>4，第三方包的引入可以使用按需引入，比如element-plus可以使用按需引入。</p><p>还有就是不常用的第三方包可以采用CDN加速，放在html文件进行引入。</p><h2 id="http状态码？"><a href="#http状态码？" class="headerlink" title="http状态码？"></a>http状态码？</h2><p>100就是目前为止一切正常，客户端继续请求，如果已经完成了请求则忽略。</p><p>101协议切换，表示正在切换协议</p><p>200表明请求成功</p><p>201是post请求的返回状态码，表示请求被成功处理，并且创建了新的资源</p><p>202表示服务器已经收到请求，但是还没有处理请求</p><p>203表示请求已经被响应，但是获得的负载经过了拥有转换功能的代理服务器的修改</p><p>204表示请求成功，但是客户端客户不需要离开当前页面</p><p>205表示通知客户端重置了文档视图</p><p>300表示重定向，表示该请求拥有多种可能的响应</p><p>400表示服务器无法理解该请求，语法无效</p><p>401表示客户端出现错误，由于缺乏目标资源要求的身份凭证，发送的请求没有得到满足</p><p>403表示客户端出现了错误，服务器能够有能力处理请求，但是客户端拒绝授权访问</p><p>404表示服务器无法找到所请求的资源</p><p>405表示服务器禁止使用当前的 http方法请求</p><p>500表示所请求的服务器发生意外情况并阻止执行请求</p><p>501请求的方法不被服务器支持</p><p>503表示服务器尚未处于可以接收请求的状态。</p><h2 id="什么是diff算法？"><a href="#什么是diff算法？" class="headerlink" title="什么是diff算法？"></a>什么是diff算法？</h2><h2 id="浏览器的渲染过程？"><a href="#浏览器的渲染过程？" class="headerlink" title="浏览器的渲染过程？"></a>浏览器的渲染过程？</h2><p>首先url输入到地址栏，浏览器会检查url输入是否合法，然后检查是否完整，如果不完整然后就会随机补上后缀，然后就是进行DNS解析，DNS解析出IP地址，然后找对IP地址对应的服务器，然后进行TCP连接，然后发起http&#x2F;https请求，完成TCP的三次握手，服务器会相应请求。</p><p>通常是一个html的文件，然后浏览器进行解析渲染页面，处理HTML生成DOM树，css生成CSSOM树，然后二者结合生成render渲染树，然后再根据位置大小进行layout布局，然后在进行paint绘制，遇到script则会暂停渲染，优先执行js代码，然后在继续渲染。</p><p>（因为js的执行和页面的渲染共用一个进程，js有可能进行一些dom操作，所以也一般会把js放到页面的底部 ）等js执行完毕后，继续进行渲染，最后渲染到页面了，然后http请求结束，断开TCP链接。</p>]]></content>
    
    
    <categories>
      
      <category>面试（1）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/26/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/26/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题总结"><a href="#面试题总结" class="headerlink" title="面试题总结"></a>面试题总结</h1><span id="more"></span><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本类型：Numeber，String，Boolean，undefined，null，symbol，bigint</p><p>引用类型 Object（普通对象，Array，Date,正则，Math数学对象），function类型</p><h2 id="map和foreach"><a href="#map和foreach" class="headerlink" title="map和foreach"></a>map和foreach</h2><p>foreach和map两者都可以对数组每一项进行遍历，map会对每一个item做操作然后返回一个新的数组，而foreach不会返回，只会更改原始数组的数据</p><p>for（…in …）可以遍历得到对象的key值；</p><h2 id="检查字符串"><a href="#检查字符串" class="headerlink" title="检查字符串"></a>检查字符串</h2><p>indexof（）检查字符串或者数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> str=<span class="hljs-string">&quot;hello world&quot;</span>;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;d&quot;</span>));  <span class="hljs-comment">//10</span><br><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">2</span>,<span class="hljs-number">45</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">88</span>,<span class="hljs-number">10</span>];<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>));<span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h2 id="js中的变量提升"><a href="#js中的变量提升" class="headerlink" title="js中的变量提升"></a>js中的变量提升</h2><p>js是单线程语言，执行的时候是按照顺序来执行的，但不是逐行分析和执行的，而是一段一段的分析执行，在执行前，会检测所有变量和函数声明，把他们添加到内存中去，所以这些变量和函数 声明能在真正声明之前使用。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域就是一个独立的地盘，不会让变量暴露出去，最大的作用就是隔离变量，不同作用域下同名的变量不会有冲突</p><p>ES6之前没有块级作用域，只有全局作用域和函数作用域。</p><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>在调用有参函数的时候，就会把所有参数都存储到arguemnts的对象中，是一个类数组数据</p><p>作用：可以先动态设置形参，然后通过arguemnts动态的的加入参数</p><h2 id="var和let和const区别"><a href="#var和let和const区别" class="headerlink" title="var和let和const区别"></a>var和let和const区别</h2><p>变量提升：var可以变量提升，let和const没有变量提升</p><p>初始化值：var和let可以不设置初始化值，但是const必须给初始化值</p><p>重复声明：var可以重复声明，后面声明的同名变量会覆盖前面声明的变量；</p><p>块级作用域：var不具有块级作用域，let和const具有块级作用域。</p><p>指针指向：const不会改变指针指向，但是var和const会改变指针指向；</p><h2 id="display有哪些属性"><a href="#display有哪些属性" class="headerlink" title="display有哪些属性"></a>display有哪些属性</h2><p>1、none，inline，inline-block，block，flex，table，</p><h2 id="块元素和行内块元素和行内元素区别"><a href="#块元素和行内块元素和行内元素区别" class="headerlink" title="块元素和行内块元素和行内元素区别"></a>块元素和行内块元素和行内元素区别</h2><p>块元素：一行只能放一个块级元素，可以设置宽度和高度，</p><p>行内块元素：一行可以放好几个行内块元素，可以设置高度和宽度</p><p>行内元素：一行可以放多个行内元素，不可以直接设置宽度和高度；</p><h2 id="什么是虚拟Dom"><a href="#什么是虚拟Dom" class="headerlink" title="什么是虚拟Dom"></a>什么是虚拟Dom</h2><p>如果浏览器操作真实Dom就需要付出昂贵的代价，而且频繁的操作真是Dom容易引发问题，所以就出现了虚拟Dom，虚拟Dom作用就是每一次响应式数据发生改变引起页面重新渲染的时候，虚拟Dom进行比较，然后更新真实Dom，尽可能的减少更新的真实Dom，从而达到优化性能的目的</p><h2 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h2><p>第一次确定节点的位置或者大小，称之为布局，之后修改了节点的大小或者位置，引发了页面重新计算称之为回流。</p><h3 id="引起回流？"><a href="#引起回流？" class="headerlink" title="引起回流？"></a>引起回流？</h3><p>1，DOM结构发生改变（添加节点或者移除节点）</p><p>2，页面的布局发生改变（width，height，padding，）</p><p>3，窗口发生改变</p><p>第一次渲染内容称之为绘制，之后页面重新渲染称之为重绘</p><h3 id="引起回流？-1"><a href="#引起回流？-1" class="headerlink" title="引起回流？"></a>引起回流？</h3><p>1，修改背景颜色</p><p>2，修改边框的样式</p><p>3，修改文字颜色</p><h3 id="怎样能避免回流和重绘呢？"><a href="#怎样能避免回流和重绘呢？" class="headerlink" title="怎样能避免回流和重绘呢？"></a>怎样能避免回流和重绘呢？</h3><p>1，修改样式的时候尽量一次性修改，添加class</p><p>2，尽量避免频繁操作DOM元素</p><p>3，对某些元素使用position的fixed或者absolute</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>定义：一个函数可以访问到外层作用域的自由变量，那么这个函数和周围的环境就是闭包</p><p>从广义的角度，js中的函数都是闭包，</p><p>从狭义的角度来说，js中的一个函数可以访问到外部的自由变量，那么就是闭包。</p><h2 id="splice和slice的区别？"><a href="#splice和slice的区别？" class="headerlink" title="splice和slice的区别？"></a>splice和slice的区别？</h2><p>splice会改变原始数组，而slice不会改变原数组 ，splice可以删除数组元素也能插入元素，</p><p>splice有3个参数，第一个参数表示开始修改元素的位置，第二个表示需要移除数组元素的个数，第三个参数填写需要添加的元素</p><p>slice有2个参数，开始提取数组元素的索引，结束提取元素的索引</p><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="vue有哪些优点和特点"><a href="#vue有哪些优点和特点" class="headerlink" title="vue有哪些优点和特点"></a>vue有哪些优点和特点</h2><p>渐进式框架：可以在项目中轻易引入</p><p>轻量级框架</p><p>易学：国人开发，中文文档很友好</p><p>双向数据绑定：数据操作的时候比较方便</p><p>还有就是组件化：可以很大程度实现逻辑的封装和复用</p><h2 id="vue生命周期函数"><a href="#vue生命周期函数" class="headerlink" title="vue生命周期函数"></a>vue生命周期函数</h2><p>beforeCreate</p><p>created</p><p>beforeMount</p><p>mounted</p><p>beforeUpdate</p><p>updated</p><p>beforeDistory</p><p>distoryed</p><h2 id="vue中组件件传值的方法"><a href="#vue中组件件传值的方法" class="headerlink" title="vue中组件件传值的方法"></a>vue中组件件传值的方法</h2><p>1.props和$emit适用于父子间传递</p><p>2.ref如果在子组件上，就是获取子组件实例</p><p>3.$parent和$Children,$root访问父实例，子实例，根实例</p><p>4.$attrs&#x2F;$listeners使用隔代组件传递</p><p>5.provide和inject隔代传递</p><p>6.EventBus事件总线方法适用于父子，兄弟，隔代传递，bus.$emit和bus.$on </p><p>7.因为vue3中移除了$on方法，可以使用mitt.js进行通信</p><p>8.vue3中获取插槽方法，使用usesolt获取插槽数据</p><p>9.Vuex，vuex中状态存储是响应式的，若store中的状态发生改变的时候，对应组件中状态也会发生改变</p><h2 id="vue中内置指令"><a href="#vue中内置指令" class="headerlink" title="vue中内置指令"></a>vue中内置指令</h2><p>v-bind</p><p>v-on</p><p>v-if&#x2F;v-else&#x2F;v-else-if</p><p>v-show</p><p>v-once</p><p>v-cloak</p><p>v-html</p><p>v-text</p><p>v-mode</p><p>v-for</p><h2 id="vue中v-if和v-show区别"><a href="#vue中v-if和v-show区别" class="headerlink" title="vue中v-if和v-show区别"></a>vue中v-if和v-show区别</h2><p>v-if是动态向dom树中添加或者删除dom元素，而v-show则是通过控制dom元素的display属性来控制显隐的</p><p>v-if切换消耗较大性能，v-show首次渲染有较大消耗</p><p>如果需要频繁切换显示隐藏使用v-show’比较好，当不大可能改变的时候使用v-if</p><h2 id="vue-router中几种模式"><a href="#vue-router中几种模式" class="headerlink" title="vue-router中几种模式"></a>vue-router中几种模式</h2><p>hash，history，abstract</p><h2 id="history模式和hash模式有什么区别"><a href="#history模式和hash模式有什么区别" class="headerlink" title="history模式和hash模式有什么区别"></a>history模式和hash模式有什么区别</h2>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/29/Vue/"/>
    <url>/2022/06/29/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><span id="more"></span><h1 id="Vue2和vue3生命周期"><a href="#Vue2和vue3生命周期" class="headerlink" title="Vue2和vue3生命周期"></a>Vue2和vue3生命周期</h1><h2 id="在vue2中生命周期函数："><a href="#在vue2中生命周期函数：" class="headerlink" title="在vue2中生命周期函数："></a>在vue2中生命周期函数：</h2><p>beforeCreate（）</p><p>Created（）</p><p>brforeMount（）</p><p>mounted（）</p><p>brforeUpdate（）</p><p>updated（）</p><p>beforeDestory（）</p><p>destoryed（）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">beforeCreate():实例在内存中被创建出来，还没有初始化好<span class="hljs-keyword">data</span>和methods属性。<br><br>created():实例已经在内存中创建，已经初始化好<span class="hljs-keyword">data</span>和method，此时还没有开始编译模板。<br><br>beforeMount():已经完成了模板的编译，还没有挂载到页面中。<br><br>mounted()：将编译好的模板挂载到页面指定的容器中显示。<br><br>beforeUpdate():状态更新之前执行函数，此时<span class="hljs-keyword">data</span>中的状态值是最新的，但是界面上显示的数据还是旧的，因为还没有开始重新渲染DOM节点。<br><br>updated():此时<span class="hljs-keyword">data</span>中的状态值和界面上显示的数据都已经完成了跟新，界面已经被重新渲染好了！<br><br>beforeDestroy():实例被销毁之前。<br><br>destroyed():实例销毁后调用，Vue实例指示的所有东西都会解绑，所有的事件监听器都会被移除,所有的子实例也都会被销毁。组件已经被完全销毁，此时组建中所有<span class="hljs-keyword">data</span>、methods、以及过滤器，指令等，都已经不可用了。<br></code></pre></td></tr></table></figure><h2 id="vue3中生命周期函数："><a href="#vue3中生命周期函数：" class="headerlink" title="vue3中生命周期函数："></a>vue3中生命周期函数：</h2><p>setup（）</p><p>onBeforeMount（）</p><p>onMounted（）</p><p>onBeforeUpdate（）</p><p>onUpdated（）</p><p>onBeforeUnmount（）</p><p>onUnmounted（）</p><p>onActivated（）</p><p>onDeactivated（）</p><p>onErrorCaptured(）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">setup() :开始创建组件之前，在beforeCreate和created之前执行。创建的是data和method<br>onBeforeMount() : 组件挂载到节点上之前执行的函数。<br>onMounted() : 组件挂载完成后执行的函数。<br>onBeforeUpdate(): 组件更新之前执行的函数。<br>onUpdated(): 组件更新完成之后执行的函数。<br>onBeforeUnmount(): 组件卸载之前执行的函数。<br>onUnmounted(): 组件卸载完成后执行的函数<br>onActivated(): 被包含在中的组件，会多出两个生命周期钩子函数。被激活时执行。<br>onDeactivated(): 比如从 A 组件，切换到 B 组件，A 组件消失时执行。<br>onErrorCaptured(): 当捕获一个来自子孙组件的异常时激活钩子函数。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/21/React/"/>
    <url>/2022/06/21/React/</url>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><span id="more"></span><h2 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h2><p>生命周期就是从开始到逐渐消亡的这个过程；</p><p>生命周期就是这一过程中的各个阶段，而生命周期函数就可以并表示出但前所处于的阶段；</p><p>react的生命周期</p><p>Mounting挂载阶段 –生命周期函数componentDidMount</p><p>Updating更新阶段–生命周期函数componentDidUpdate</p><p>Unmounting卸载阶段–生命周期函数componentWillUnmount</p><p>React生命周期整个过程</p><p>（1）首先先创建组件，调用constructor（）构造器方法，</p><p>（2）然后调用render（）函数告诉react要显示的内容</p><p>（3）把render函数返回的挂载到Dom树上面，挂载成功就执行componentDidMount（）方法</p><p>如果页面发生更新</p><p>（4）重新执行render方法，然后执行componentDidUpdate方法</p><p>组件被卸载的时候</p><p>（5）执行componentWillUnmount（）函数</p><h2 id="React组件件的通信"><a href="#React组件件的通信" class="headerlink" title="React组件件的通信"></a>React组件件的通信</h2><h3 id="父子间通信"><a href="#父子间通信" class="headerlink" title="父子间通信"></a>父子间通信</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>类组件传递通过props传递，传到子组件然后对this.props解构，就可以直接使用了 ，可以不用实现constructor()也可以直接使用（可以省略）</p><p>函数组件不存在this，直接传递给props保存在里面，可以直接解构使用</p><p>需要使用prop-types库对传过来的数据对类型进行验证是使用子组件.propTypes，设置默认值使用子组件.defaultProps</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>子传父也是通过props，跟父传子形式差不多，父组件有一个操作函数，然后父组件把这个事件通过props传递给子组件子组件调用就可以</p><h3 id="跨组件通信"><a href="#跨组件通信" class="headerlink" title="跨组件通信"></a>跨组件通信</h3><h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><p>React.createContext</p><p>首先使用React.createContext创建需要传递的内容，里面可以传个默认值</p><p>Context.Provider</p><p>然后使用Context.Provider组件包裹父组件，然后可以传递一个value值，这里的值就是需要传递的内容</p><p>Class.contextType</p><p>需要使用的类组件就可以使用Class.contextType&#x3D;(在React.createContext创建的变量名)</p><p>然后就可以在这个类组件中使用传递过来的数据，通过解构this.context中的内容然后使用。</p><p>Context.Consumer</p><p>父组件传递给函数组件的时候，这个时候就可以在这个函数组件中使用Context.Consumer组件然后然后包裹一个箭头函数，然后就可以在函数组件中使用了，还有就是有多个context数据需要传递的时候也可以使用这个，使用嵌套就可以了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs react">&lt;UserInfo.Consumer&gt;<br>       &#123;(value) =&gt; &#123;<br>         return (<br>           &lt;ThemeInfo.Consumer&gt;<br>             &#123;(theme) =&gt; &#123;<br>               return (<br>                 &lt;div&gt;<br>                   &lt;h2&gt;用户：&#123;value.name&#125;&lt;/h2&gt;<br>                   &lt;h2 style=&#123;&#123; color: value.theme &#125;&#125;&gt;主题：&#123;value.theme&#125;&lt;/h2&gt;<br>                   &lt;h2&gt;&#123;theme.color&#125;&lt;/h2&gt;<br>                 &lt;/div&gt;<br>               );<br>             &#125;&#125;<br>           &lt;/ThemeInfo.Consumer&gt;<br>         );<br>       &#125;&#125;<br>     &lt;/UserInfo.Consumer&gt;<br></code></pre></td></tr></table></figure><h3 id="全局事件传递"><a href="#全局事件传递" class="headerlink" title="全局事件传递"></a>全局事件传递</h3><p>1、安装events yarn add events</p><p>2、导入import {EventEmitter} from “events”</p><p>3、定义const eventBus&#x3D;new EventEmitter（）；</p><p>4、先发射事件，eventBus.emit（)</p><p>5、在接收在componentDidMount（）中监听addlistener（）</p><p>6、在componentWillUnmount（）中取消监听removelistener（）</p><h2 id="react实现插槽-效果"><a href="#react实现插槽-效果" class="headerlink" title="react实现插槽 效果"></a>react实现插槽 效果</h2><h3 id="传入一个元素"><a href="#传入一个元素" class="headerlink" title="传入一个元素"></a>传入一个元素</h3><p>这个时候父元素直接在引用的组件内部传入，然后子组件在rennder函数里面你可以拿到this.props.children拿到传过来的数据</p><h3 id="传入多个元素"><a href="#传入多个元素" class="headerlink" title="传入多个元素"></a>传入多个元素</h3><p>直接在父元素引用组件使用单标签，然后直接命名传递，像父传子一样操作，然后在子组件this.props中直接通过对象的解构拿到数据。</p><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><h3 id="setState为什么是异步的？"><a href="#setState为什么是异步的？" class="headerlink" title="setState为什么是异步的？"></a>setState为什么是异步的？</h3><p>1、就是设置为同步的话，当数据发生改变的时候就会调用render函数，一个项目中可能存在多个setState，如果频繁调用就会频繁执行render函数进行页面的刷新，所以性能大大降低，使用异步react就可以获取多个setState的更新，然后批量进行更新。</p><p>2、就是如果是同步的话，render函数执行会慢一点，这样state和props中的数据不一致就有可能出现问题。</p><h3 id="一定是异步吗？"><a href="#一定是异步吗？" class="headerlink" title="一定是异步吗？"></a>一定是异步吗？</h3><p>不一定，</p><p>1、把setstate放在定时器中</p><p>2、使用原生DOM 事件中</p><h2 id="fragment片段，跟小程序中的block一样"><a href="#fragment片段，跟小程序中的block一样" class="headerlink" title="fragment片段，跟小程序中的block一样"></a>fragment片段，跟小程序中的block一样</h2><h2 id="react中写样式"><a href="#react中写样式" class="headerlink" title="react中写样式"></a>react中写样式</h2><p>1、行内样式 伪类，伪元素不能实现</p><p>2、普通css 样式重叠严重</p><p>3、css module 比较麻烦，需要引入模块，使用style.标签</p><p>4、css in js</p><p>需要安装库，最常用的一个库就是 styled-components</p><p>安装 yarn add styled-components</p><h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h2><p>这是一个组件库,就像elementUI一样。</p><p>安装yarn add antd或者 npm install antd</p><p>引入全局样式import “antd&#x2F;dist&#x2F;antd.css”</p><p>使用图标需要安装</p><p>yarn add @ant-design&#x2F;icons</p><h2 id="craco"><a href="#craco" class="headerlink" title="craco"></a>craco</h2><p>配置路径别名</p><p>安装</p><p>yarn add @craco&#x2F;craco</p><p>然后在package.json中更改配置</p><p>在antdesign中高级配置中操作，先安装$ yarn add craco-less</p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>yarn add axios</p><p>axios（{</p><p>url：””</p><p>method:””,</p><p>get：prams:{}或者post：data:{}</p><p>）</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>axios.interceptors.request.use(config&#x3D;&gt;{</p><p>1、拦截添加loading组件</p><p>2、登录鉴权</p><p>3、prams和data序列化</p><p>return config；</p><p>},err&#x3D;&gt;{})</p><p>axios.interceptors.prsponse.use(res&#x3D;&gt;{</p><p>1、服务器返回筛选结果</p><p>return res.data</p><p>},err&#x3D;&gt;{})</p><h2 id="react-transition-group"><a href="#react-transition-group" class="headerlink" title="react-transition-group"></a>react-transition-group</h2><p>动画库，需要安装才能使用 </p><p>CSSTransition {unmountOnExit&#x3D;{true}}</p><p>-appear&#x2F;-appear-active&#x2F;-appear-done</p><p>-enter&#x2F;-enter-active&#x2F;-enter-done</p><p>-exit&#x2F;-exit-active&#x2F;-exit-done</p><p>switchtransition</p><p>transition group</p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>先安装</p><p>数据状态管理容器，可以对数据进行控制和追踪，提供可预测的状态管理。</p><p>store，action，把二者联系起来是reducer</p><p>三大原则：单一数据源，state是可读的，用纯函数进行修改</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1、安装@reduxjs&#x2F;toolkit库 和react-redux库yarn add @reduxjs&#x2F;toolkit  react-redux</p><p>2、引入configureStore创建store，内传reducer</p><p>3、导入Provider包裹<App>传入store，实现共享</App></p><p>4、然后导入createSlice创件reducers</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@reduxjs/toolkit&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getTopBanners &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services/recommend&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> recommendSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;recommend&quot;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-title class_">TopBanners</span>: [],<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-comment">// 请求数据</span><br>    <span class="hljs-title function_">changeTopBannerAction</span>(<span class="hljs-params">state, res</span>) &#123;<br>      state.<span class="hljs-property">TopBanners</span> = res.<span class="hljs-property">payload</span>.<span class="hljs-property">banners</span>;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 导出actions</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; changeTopBannerAction &#125; = recommendSlice.<span class="hljs-property">actions</span>;<br><br><span class="hljs-comment">// 异步请求数据（发送网络请求的action）</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTopBannerAction</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">getTopBanners</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">changeTopBannerAction</span>(res));<br>    &#125;);<br>  &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 导出reducer</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> recommendSlice.<span class="hljs-property">reducer</span>;<br><br></code></pre></td></tr></table></figure><p>5、通过useSelector和useDispath使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch, shallowEqual &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getTopBannerAction &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/recommend-slice&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">LXRecommend</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">TopBanners</span> &#125; = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">recommend</span>, shallowEqual);<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">getTopBannerAction</span>());<br>  &#125;, [dispatch]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>LXRecommend :&#123;TopBanners.length&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">LXRecommend</span>;<br><br></code></pre></td></tr></table></figure><p>6、在使用 <code>createSlice()</code> 这个api创建切片时，我们传入的参数reducers属性中使用的方法可以直接修改state，因为<code>createSlice</code> 内部使用了一个名为 <a href="https://immerjs.github.io/immer/">Immer</a> 的库，帮助我们将更新转换为不可变更新</p><h3 id="react-redux库"><a href="#react-redux库" class="headerlink" title="react-redux库"></a>react-redux库</h3><p>先安装库</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>以下两个都可以进行异步请求</p><p>用到redux-thunk也得先安装 yarn add redux-thunk</p><p>redux-saga先安装，更复杂一点</p><p>在React组件中使用React-Redux的useSelector&#x2F;useDispatch钩子</p><h3 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h3><p>第一步先在浏览器安装扩展程序，第二步去github上查看如何配置，然后进行配置</p><h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><p>安装react-router   yarn add react-router-dom</p><p>1、创建routes配置路由的相关关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXDiscover</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/discover&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXFriend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/friend&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXMine</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/pages/mine&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXRecommend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/discover/children-pages/recommend&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXRanking</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/discover/children-pages/ranking&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXSongs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/discover/children-pages/songs&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXDjradio</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/discover/children-pages/djradio&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXArtist</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/discover/children-pages/artist&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LXAlbum</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/discover/children-pages/album&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover&quot;</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/discover&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXDiscover</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;recommend&quot;</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;recommend&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXRecommend</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;ranking&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXRanking</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;songs&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXSongs</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;djradio&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXDjradio</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;artist&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXArtist</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;album&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXAlbum</span> /&gt;</span></span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mine&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXMine</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/friend&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LXFriend</span> /&gt;</span></span>,<br>  &#125;,<br>];<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;<br><br></code></pre></td></tr></table></figure><p>2、需要在App外层包裹相应的实现路由标签，HashRouter或者BrowserRouter，分别是hash路由和history路由</p><p>3、在app.js中配置映射代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入路由映射代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">RouterElement</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> element = <span class="hljs-title function_">useRoutes</span>(routes);<br>  <span class="hljs-keyword">return</span> element;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在<HashRouter>中使用<RouterElement></RouterElement></HashRouter></p><p>4、然后NavLink到相应的链接还有标题，就可以进行相应的跳转了</p><p>5、子路由跳转路由要写全，在routes，配置中在父路由下配置children就可以，不用写全部路径，得并上父路由，然后NavLink实现相应的跳转就可以了</p><p>6、子路由实现后还需要在外层添加   <Outlet>标签</Outlet></p><h2 id="react-Hooks"><a href="#react-Hooks" class="headerlink" title="react Hooks"></a>react Hooks</h2><h3 id="常用hooks"><a href="#常用hooks" class="headerlink" title="常用hooks"></a>常用hooks</h3><p> useState</p><p>useEffect</p><p>useContext</p><p>先创建createContext（）</p><p>然后context.provider包裹外层组件，这样子孙组件就可以使用共享数据了</p><p>直接useContent（context）把第一步创建的context传入就可以了，就可以拿到共享数据了</p><h3 id="其它hooks"><a href="#其它hooks" class="headerlink" title="其它hooks"></a>其它hooks</h3><ul><li>useReducer（useState的替代方案）</li><li>useCallback优化性能（子组件变化，针对于传入的回调函数优化，返回值只能是函数）</li><li>useMemo优化性能（复杂计算，针对于传值优化，只对返回值做优化）</li><li>useref（访问DOM的主要方式）</li><li>useImperativehandle（通常与forwardRef一起使用，函数式组件中使用获取组件的ref实例，进行操作）</li><li>useLayoutEffect和useEffect（再render渲染前执行）</li></ul><h3 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h3>]]></content>
    
    
    <categories>
      
      <category>react</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/21/%E6%95%B0%E7%BB%84%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <url>/2022/06/21/%E6%95%B0%E7%BB%84%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="数组的高阶函数"><a href="#数组的高阶函数" class="headerlink" title="数组的高阶函数"></a>数组的高阶函数</h1><span id="more"></span><h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> movies = [<span class="hljs-string">&quot;大话西游&quot;</span>, <span class="hljs-string">&quot;妖猫传&quot;</span>, <span class="hljs-string">&quot;斗罗大陆&quot;</span>, <span class="hljs-string">&quot;完美世界&quot;</span>];<br>        <span class="hljs-keyword">let</span> list = movies.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> item + <span class="hljs-string">&quot;000&quot;</span>;<br>        &#125;);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<span class="hljs-comment">// [&#x27;大话西游000&#x27;, &#x27;妖猫传000&#x27;, &#x27;斗罗大陆000&#x27;, &#x27;完美世界000&#x27;]</span><br></code></pre></td></tr></table></figure><p>array.map((item,index,arr)&#x3D;&gt;{})</p><p>可以传3个参数，第一个参数表示循环的每项item，第二个参数表示下标，第三个参数表示当前循环的数组；</p><p>map高阶函数处理数组的映射，可以对每一项分别处理后然后return出来添加进一个新的数组中去</p><h2 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">10</span>, <span class="hljs-number">98</span>, <span class="hljs-number">25</span>, <span class="hljs-number">100</span>, <span class="hljs-number">68</span>, <span class="hljs-number">15</span>, <span class="hljs-number">108</span>, <span class="hljs-number">56</span>, <span class="hljs-number">12</span>, <span class="hljs-number">222</span>];<br>       <span class="hljs-keyword">let</span> newNumbers = numbers.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>           <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">50</span>;<br>       &#125;)<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newNumbers);<span class="hljs-comment">//[98, 100, 68, 108, 56, 222]</span><br></code></pre></td></tr></table></figure><p>array.filter()</p><p>同样可以传入3个参数，第一个参数表示循环的每项item，第二个参数表示下标，第三个参数表示当前循环的数组</p><p>filter函数可以作为函数数组的过滤器，对item中每项数据进行过滤，如果return的条件是true的话就会返回值添加到新的数组中去，如果返回的条件是false的话，就舍去。</p><p><strong>这两个高阶函数如果条件是一句话的时候，return和外面的大括号可以省略，但是可读性很差</strong></p><h2 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> totalPrice=<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">books</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">preValue,item</span>)=&gt;</span>&#123; <span class="hljs-keyword">return</span> preValue+item.<span class="hljs-property">price</span>*item.<span class="hljs-property">count</span>;&#125;,<span class="hljs-number">0</span>);<br>              <span class="hljs-keyword">return</span> totalPrice<br></code></pre></td></tr></table></figure><p>参数有两个，第一个参数回调函数（回调函数又有4个参数，第一个是preValue，就是上一次循环后的结果，第二个参数表示循环的每项item，第三个参数表示下标，第四个参数表示当前循环的数组），第二个参数是初始化值</p><p>可以做累加操作，对数据做累加操作。返回的是一个结果。也是一个高阶函数。</p><h2 id="slice函数"><a href="#slice函数" class="headerlink" title="slice函数"></a>slice函数</h2><p>数组的截取时候array.slice()</p><p>左闭右开，截取区间内的数据</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/05/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><span id="more"></span><p>安装mysql第三方库</p><h2 id="基本连接"><a href="#基本连接" class="headerlink" title="基本连接"></a>基本连接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><br><span class="hljs-comment">// 与数据库创立连接</span><br><span class="hljs-keyword">const</span> connection = mysql.<span class="hljs-title function_">createPool</span>(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;root&quot;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;lx20010928&quot;</span>,<br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&quot;my_db&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查询返回的是一个数组</span><br><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;SELECT * FROM user&quot;</span>;<br><span class="hljs-comment">// 测试连接数据库是否成功;</span><br>connection.<span class="hljs-title function_">query</span>(sqlStr, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br><br><br></code></pre></td></tr></table></figure><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userinfo = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kuan&quot;</span>, <span class="hljs-attr">studentid</span>: <span class="hljs-string">&quot;003&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> sqlStr2 = <span class="hljs-string">&quot;INSERT INTO user SET ?&quot;</span>;<br>connection.<span class="hljs-title function_">query</span>(sqlStr2, userinfo, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>    <span class="hljs-keyword">if</span> (results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="改数据"><a href="#改数据" class="headerlink" title="改数据"></a>改数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userinfo = &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiang&quot;</span>, <span class="hljs-attr">studentid</span>: <span class="hljs-string">&quot;008&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;UPDATE user SET ? WHERE id=?&quot;</span>;<br>connection.<span class="hljs-title function_">query</span>(sqlStr, [userinfo, userinfo.<span class="hljs-property">id</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>    <span class="hljs-keyword">if</span> (results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新成功&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="删数据"><a href="#删数据" class="headerlink" title="删数据"></a>删数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;DELETE FROM user WHERE id=?&quot;</span>;<br>connection.<span class="hljs-title function_">query</span>(sqlStr, <span class="hljs-number">2</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>    <span class="hljs-keyword">if</span> (results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/25/%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/04/25/%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><span id="more"></span><h2 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h2><p>8080端口</p><h2 id="小兔鲜"><a href="#小兔鲜" class="headerlink" title="小兔鲜"></a>小兔鲜</h2><p>6060端口</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/25/Webpack/"/>
    <url>/2022/04/25/Webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><span id="more"></span><p>定义：静态的模块化打包工具，为现代的javascript的应用程序。</p><p>使用本地webpack打包：</p><p>npx webpack；</p><p>npx webpack –entry 路径 –output-path 路径:这样打包可以设置入口不一定是index.js</p><p>也可以package.json中设置 执行脚本那一项设置webpack –entry 路径 –output-path 路径</p><p>最主要使用的还是单独建立一个文件webpack.config.js专门配置webpack，</p><p>出口必须为绝对路径</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/04/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><span id="more"></span><h3 id="小程序API"><a href="#小程序API" class="headerlink" title="小程序API"></a>小程序API</h3><h3 id="1、事件监听API"><a href="#1、事件监听API" class="headerlink" title="1、事件监听API"></a>1、事件监听API</h3><h3 id="2、同步API"><a href="#2、同步API" class="headerlink" title="2、同步API"></a>2、同步API</h3><h3 id="3、异步API"><a href="#3、异步API" class="headerlink" title="3、异步API"></a>3、异步API</h3><p>wx.switchTab({url:})跳转到tab页面</p><p>wx.navigateTo({url:})跳转到非 tab页面</p><h3 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h3><h4 id="应用生命周期函数-：、"><a href="#应用生命周期函数-：、" class="headerlink" title="应用生命周期函数 ：、"></a>应用生命周期函数 ：、</h4><p>onLunch（）</p><p>onShow（）</p><p>onHide（）</p><h4 id="页面生命周期："><a href="#页面生命周期：" class="headerlink" title="页面生命周期："></a>页面生命周期：</h4><p>onLoad（）</p><p>onShow()</p><p>onReady()</p><p>onHide()</p><p>onUnload()</p><p>微信小程序中组件的生命周期：</p><p>created，</p><p>attached，</p><p>ready，</p><p>moved，</p><p>detached，</p><p>error</p><p><img src="/2022/04/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/image-20220501152855393.png" alt="image-20220501152855393"></p><p>组件中生命周期函数：</p><p>show，hide，resize </p><h3 id="vuex数据存储"><a href="#vuex数据存储" class="headerlink" title="vuex数据存储"></a>vuex数据存储</h3><p>npm install –save <a href="mailto:&#109;&#x6f;&#x62;&#120;&#45;&#x6d;&#x69;&#x6e;&#105;&#112;&#x72;&#x6f;&#x67;&#114;&#97;&#x6d;&#64;&#52;&#46;&#49;&#51;&#46;&#x32;">&#109;&#x6f;&#x62;&#120;&#45;&#x6d;&#x69;&#x6e;&#105;&#112;&#x72;&#x6f;&#x67;&#114;&#97;&#x6d;&#64;&#52;&#46;&#49;&#51;&#46;&#x32;</a> <a href="mailto:&#x6d;&#x6f;&#98;&#x78;&#45;&#x6d;&#x69;&#x6e;&#105;&#x70;&#x72;&#x6f;&#x67;&#114;&#97;&#109;&#45;&#x62;&#105;&#x6e;&#x64;&#x69;&#110;&#103;&#115;&#x40;&#x31;&#x2e;&#50;&#x2e;&#x31;">&#x6d;&#x6f;&#98;&#x78;&#45;&#x6d;&#x69;&#x6e;&#105;&#x70;&#x72;&#x6f;&#x67;&#114;&#97;&#109;&#45;&#x62;&#105;&#x6e;&#x64;&#x69;&#110;&#103;&#115;&#x40;&#x31;&#x2e;&#50;&#x2e;&#x31;</a></p><h3 id="学习小程序中出现的比较实用的方法"><a href="#学习小程序中出现的比较实用的方法" class="headerlink" title="学习小程序中出现的比较实用的方法"></a>学习小程序中出现的比较实用的方法</h3><p>1、 background-color:rgba(0,0,0,.5);和backdrop-filter:blur(5px)设置css毛玻璃特效</p><p>2、slice既可以对数组进行切割，也能对字符串进行切割</p><p>split()把字符串切割成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> strInfo = <span class="hljs-string">&quot;liuxu&amp;success!&quot;</span>;<br>        <span class="hljs-keyword">const</span> newStrInfo = strInfo.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStrInfo);<span class="hljs-comment">// [&#x27;liuxu&#x27;, &#x27;success!&#x27;]</span><br></code></pre></td></tr></table></figure><p>3、array.filter和array.map这两个方法的区别</p><p>filter是把符合条件的数据返回出来成一个新的数组，map是把计算的结果或者作出处理后的数据返回出来成为一个数组；</p><p>4、在for循环中in是遍历循环对象获取索引而of时候获取值进行遍历</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/03/json/"/>
    <url>/2022/04/03/json/</url>
    
    <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><span id="more"></span><h2 id="json-stringfy"><a href="#json-stringfy" class="headerlink" title="json.stringfy"></a>json.stringfy</h2><p><code>**JSON.stringify()**</code> 方法将一个 JavaScript 对象或值转换为 JSON 字符串，</p><h2 id="json-parse"><a href="#json-parse" class="headerlink" title="json.parse"></a>json.parse</h2><p><code>**JSON.parse()**</code> 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/27/ES6-ES11/"/>
    <url>/2022/03/27/ES6-ES11/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-ES11"><a href="#ES6-ES11" class="headerlink" title="ES6-ES11"></a>ES6-ES11</h1><span id="more"></span><p>ECMAScript</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>1、不能重复赋值，重复赋值会报错；</p><p>2、具有块级作用域</p><p>3、不存在变量提升</p><p>4、不影响作用域链</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>1、一定要赋初始值</p><p>2、定义的常量不能修改</p><p>3、块级作用域</p><p>4、对数组或者是对象里面的元素修改，不算做对常量的修改，不会报错</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数适用于与this无关的回调，比如定时器，数组的方法回调 </p><p>不适合与this有关的问题，事件回调，对象的方法</p><p>当形参只有一个的时候，小括号可以省略</p><p>当代码体只有一条语句的时候，花括号可以省略</p><h3 id="箭头函数不能使用的情况"><a href="#箭头函数不能使用的情况" class="headerlink" title="箭头函数不能使用的情况"></a>箭头函数不能使用的情况</h3><p>1、不能作为构造函数实例化对象时使用</p><p>2、不能使用argument变量</p><h3 id="箭头函数不能使用this的情况"><a href="#箭头函数不能使用this的情况" class="headerlink" title="箭头函数不能使用this的情况"></a>箭头函数不能使用this的情况</h3><p>1、定义对象里面的方法，并且方法内部包含this</p><p>2、需要动态this的时候，也不应该使用箭头函数。</p><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><p>es6引入的新参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">// function fn() &#123;</span><br>      <span class="hljs-comment">//     console.log(arguments);//输出的是一个类数组</span><br>      <span class="hljs-comment">// &#125;</span><br>      <span class="hljs-comment">// fn(1, 2, 3)</span><br><br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">...args</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args); <span class="hljs-comment">//这里返回的就是一个数组</span><br>      &#125;<br>      <span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b, ...args</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//5</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">//6</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args); <span class="hljs-comment">//7,8,9,00</span><br>      &#125;<br>      <span class="hljs-title function_">fn</span>(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">00</span>)<br></code></pre></td></tr></table></figure><p>如果还有其它参数的话，就必须把参数放在最后</p><h2 id="扩展运算符使用"><a href="#扩展运算符使用" class="headerlink" title="扩展运算符使用"></a>扩展运算符使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.数组的合并</span><br>    <span class="hljs-keyword">const</span> info = [<span class="hljs-string">&quot;liuxu&quot;</span>, <span class="hljs-string">&quot;qianmian&quot;</span>];<br>    <span class="hljs-keyword">const</span> info2 = [<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;jane&quot;</span>];<br>    <span class="hljs-comment">// es5语法合并</span><br>    <span class="hljs-keyword">const</span> infoAll = info.<span class="hljs-title function_">concat</span>(info2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(infoAll);<br>    <span class="hljs-comment">// es6语法</span><br>    <span class="hljs-keyword">const</span> infoAll2 = [...info, ...info2];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(infoAll2);<br>    <span class="hljs-comment">// 将伪数组转化为真正的数组</span><br>    <span class="hljs-keyword">const</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs); <span class="hljs-comment">//伪数组</span><br>    <span class="hljs-keyword">const</span> divs2 = [...divs];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs2);<br></code></pre></td></tr></table></figure><p>j基本数据类型特殊记忆方法</p><p>usonb:u so nb你如此牛逼</p><p>u:undefined</p><p>s:string,symbol</p><p>o:object</p><p>n:null,number</p><p>b:boolean</p><p>数组的合并是arr1.concat（arr2）,会把两个数组合并，但是不会去重</p><p>对象的合并：Object.assign(obj1,obj2);会把两个对象合并，但是如果属性名一样，第二个对象会把第一个对象相同的覆盖掉</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> movie = [<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-string">&quot;沙和尚&quot;</span>];<br>     <span class="hljs-comment">// 复习数组的方法</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">in</span> movie) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v); <span class="hljs-comment">//0 1 2 3</span><br>         <span class="hljs-comment">// 返回的是键名</span><br>     &#125;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> movie) &#123;<br>         <span class="hljs-comment">//返回的是键值</span><br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v); <span class="hljs-comment">//唐僧、孙悟空、猪八戒、沙和尚</span><br>     &#125;<br>     <span class="hljs-comment">// 数组里面含有迭代器这个属性，里面有一个next（）方法，每执行一次指针就向下移一个，可以返回当前指针指的数据，还有遍历是否结束的标志</span><br>     <span class="hljs-keyword">const</span> iterator = movie[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator.<span class="hljs-title function_">next</span>());<br>     <span class="hljs-comment">//  &#123;value: &#x27;唐僧&#x27;, done: false&#125;</span><br>     <span class="hljs-comment">// &#123;value: &#x27;孙悟空&#x27;, done: false&#125;</span><br>     <span class="hljs-comment">// &#123;value: &#x27;猪八戒&#x27;, done: false&#125;</span><br>     <span class="hljs-comment">// &#123;value: &#x27;沙和尚&#x27;, done: false&#125;</span><br>     <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>promise链式使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// 使用promise进行链式调用</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./files/a.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(data);<br>    &#125;)<br>&#125;);<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>            fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./files/b.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>([value, data]);<br>            &#125;)<br>        &#125;)<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>            fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./files/c.txt&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>                value.<span class="hljs-title function_">push</span>(data);<br>                <span class="hljs-title function_">resolve</span>(value)<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\r\n&quot;</span>));<br>    &#125;)<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// set可以自动去重</span><br>    <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&quot;david&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;jane&quot;</span>, <span class="hljs-string">&quot;david&quot;</span>]);<br>    <span class="hljs-comment">// 获取元素的个数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">size</span>);<br>    <span class="hljs-comment">// 添加新元素</span><br>    <span class="hljs-comment">// s.add(&quot;lihua&quot;);</span><br>    <span class="hljs-comment">// 删除元素</span><br>    <span class="hljs-comment">// s.delete(&quot;david&quot;);</span><br>    <span class="hljs-comment">// 检测</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;david&quot;</span>));<br>    <span class="hljs-comment">// 清空</span><br>    <span class="hljs-comment">// s.clear();</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br></code></pre></td></tr></table></figure><p>数组的一些操作更简单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>       <span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br>       <span class="hljs-comment">// 数组去重</span><br>       <span class="hljs-comment">// const result = [...new Set(arr)];</span><br>       <span class="hljs-comment">// console.log(result);</span><br>       <span class="hljs-comment">// 交集</span><br>       <span class="hljs-comment">// let num = [...new Set(arr)].filter(item =&gt; (new Set(arr2)).has(item));</span><br>       <span class="hljs-comment">// console.log(num);</span><br>       <span class="hljs-comment">// 并集</span><br>       <span class="hljs-comment">// const result = [...new Set(arr.concat(arr2))];</span><br>       <span class="hljs-comment">// console.log(result);</span><br>       <span class="hljs-comment">// 差集</span><br>       <span class="hljs-keyword">const</span> num = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)];<br>       <span class="hljs-keyword">const</span> result = num.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> !((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr2)).<span class="hljs-title function_">has</span>(item)));<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br></code></pre></td></tr></table></figure><h2 id="es6继承类"><a href="#es6继承类" class="headerlink" title="es6继承类"></a>es6继承类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>         <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price</span>) &#123;<br>             <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand;<br>             <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>         &#125;<br>         <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我可以打电话&quot;</span>);<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">class</span> <span class="hljs-title class_">smartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Phone</span> &#123;<br>         <span class="hljs-title function_">constructor</span>(<span class="hljs-params">brand, price, color, size</span>) &#123;<br>             <span class="hljs-variable language_">super</span>(brand, price);<br>             <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>             <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>         &#125;<br>         <span class="hljs-title function_">takePhoto</span>(<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我可以拍照！&quot;</span>);<br>         &#125;<br>         <span class="hljs-title function_">playGames</span>(<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我可以玩游戏&quot;</span>);<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">const</span> mi = <span class="hljs-keyword">new</span> <span class="hljs-title function_">smartPhone</span>(<span class="hljs-string">&quot;小米&quot;</span>, <span class="hljs-number">1299</span>, <span class="hljs-string">&quot;black&quot;</span>, <span class="hljs-string">&quot;5.5&quot;</span>);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mi);<br><br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> === <span class="hljs-number">0.3</span>);<br>     <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>     <span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">concat</span>(arr2));<br></code></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">通用导入方法<br><span class="hljs-keyword">import</span> a2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./14export.js&#x27;</span> <br><span class="hljs-comment">//默认导入才能这样使用</span><br><span class="hljs-keyword">import</span> a2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./14export.js&#x27;</span>;<br><span class="hljs-comment">//也可以通过解构的方法进行导入</span><br></code></pre></td></tr></table></figure><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 默认暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;liuxu&quot;</span>,<br>    <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我爱学习！！&quot;</span>);<br>    &#125;<br>&#125;<br>也可以使用对象的方法进行导出<br></code></pre></td></tr></table></figure><h2 id="es7新特性"><a href="#es7新特性" class="headerlink" title="es7新特性"></a>es7新特性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&quot;西游记&quot;</span>, <span class="hljs-string">&quot;水浒传&quot;</span>, <span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;红楼梦&quot;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;西游记&quot;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-comment">// 以前的方法如果不存在返回-1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;金瓶梅&quot;</span>)); <span class="hljs-comment">//-1</span><br><span class="hljs-comment">// 还有新属性就是乘方</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> ** <span class="hljs-number">4</span>); <span class="hljs-comment">//16</span><br><span class="hljs-comment">// 以前的方法是</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<span class="hljs-comment">//16</span><br></code></pre></td></tr></table></figure><h2 id="es8新特性"><a href="#es8新特性" class="headerlink" title="es8新特性"></a>es8新特性</h2><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-comment">// return &quot;刘旭&quot;</span><br>          <span class="hljs-comment">// throw new Error(&quot;抛出一个错误&quot;)</span><br>          <span class="hljs-comment">// 返回的结果不是一个promise对象， 返回的就是一个成功的promise函数， </span><br>          <span class="hljs-comment">// 还有就是抛出错误的时候返回的是失败的promise</span><br>          <span class="hljs-comment">// 返回的结果是个peomise对象的时候根据peomise内部来判断</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>              <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;失败&quot;</span>);<br>          &#125;)<br>      &#125;<br>      <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">fn</span>();<br>      <span class="hljs-comment">// console.log(result);</span><br>      result.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>      &#125;, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>      &#125;)<br></code></pre></td></tr></table></figure><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>               <span class="hljs-comment">// resolve(&quot;成功的值&quot;);</span><br>               <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;失败的值&quot;</span>)<br>           &#125;)<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>       &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>       &#125;<br>   &#125;<br>   <span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><p>二者结合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendAjax</span>(<span class="hljs-params">URL</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>               <span class="hljs-comment">// 创建对象</span><br>               <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>               <span class="hljs-comment">// 初始化</span><br>               xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-variable constant_">URL</span>);<br>               <span class="hljs-comment">// 发送</span><br>               xhr.<span class="hljs-title function_">send</span>();<br>               xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                       <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>                           <span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">response</span>);<br>                       &#125; <span class="hljs-keyword">else</span> &#123;<br>                           <span class="hljs-title function_">reject</span>(xhr.<span class="hljs-property">status</span>);<br>                       &#125;<br><br>                   &#125;<br>               &#125;<br>           &#125;)<br>       &#125;<br>       <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendAjax</span>(<span class="hljs-string">&quot;https://api.apiopen.top/getJoke&quot;</span>);<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>       &#125;;<br>       <span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure><h3 id="队形方法扩展"><a href="#队形方法扩展" class="headerlink" title="队形方法扩展"></a>队形方法扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>               <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;刘旭&quot;</span>,<br>               <span class="hljs-attr">books</span>: [<span class="hljs-string">&quot;西游记&quot;</span>, <span class="hljs-string">&quot;水浒传&quot;</span>, <span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;红楼梦&quot;</span>],<br>               <span class="hljs-attr">movies</span>: [<span class="hljs-string">&quot;阿甘正传&quot;</span>, <span class="hljs-string">&quot;肖申克的救赎&quot;</span>, <span class="hljs-string">&quot;这个杀手不太冷&quot;</span>]<br>           &#125;<br>           <span class="hljs-comment">// 获取对象键</span><br>           <span class="hljs-comment">// console.log(Object.keys(obj));</span><br>           <span class="hljs-comment">// // 获取对象的键值</span><br>           <span class="hljs-comment">// console.log(Object.values(obj));</span><br>           <span class="hljs-comment">// // 可以把对象的每一项化成一个二维数组</span><br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj));<br>           <span class="hljs-comment">// const m = new Map(Object.entries(obj));</span><br>           <span class="hljs-comment">// console.log(m.get(&quot;name&quot;));</span><br>           <span class="hljs-comment">// console.log(m.get(&quot;books&quot;));</span><br>           <span class="hljs-comment">// 获取对象的信息</span><br>       <span class="hljs-comment">// console.log(Object.getOwnPropertyDescriptors(obj));</span><br></code></pre></td></tr></table></figure><h2 id="es10"><a href="#es10" class="headerlink" title="es10"></a>es10</h2><p>trimStart和trimEnd</p><p>一个是取出字符串左边的空格，一个是去除字符串右边的空格</p><p>arr.flat（）将多维数组转化为低维数组，可以传参数，默认参数是1</p><h2 id="es11"><a href="#es11" class="headerlink" title="es11"></a>es11</h2><p>每个异步任务都希望得到结果</p><p>Promise.allSettled([第一个promise，第二个promise])</p><p>如果需求每个都成功才往下执行</p><p>Promise.all([第一个promise，第二个promise])</p><p>BigInt进行大数值运算</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/26/Ajax/"/>
    <url>/2022/03/26/Ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><span id="more"></span><h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域就是浏览器的同源策略导致的，只要协议，域名，端口号，三者有一个不同就属于跨域。</p><p>同源策略是一个重要的浏览器策略，用于限制一个<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Glossary/%E6%BA%90">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：可以无刷新页面直接跟服务器进行通信。允许你根据用户事件来更新部分页面内容。</p><p>缺点：存在跨域问题，（同源策略）；没有浏览历史，不能回退，SEO（搜索引擎优化）不友好。</p><h3 id="如何解决跨域？"><a href="#如何解决跨域？" class="headerlink" title="如何解决跨域？"></a>如何解决跨域？</h3><h4 id="1、cors解决"><a href="#1、cors解决" class="headerlink" title="1、cors解决"></a>1、cors解决</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 允许跨域</span><br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br></code></pre></td></tr></table></figure><p>在node中</p><p>安装第三方中间件koa-cors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-cors&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br></code></pre></td></tr></table></figure><h4 id="2、node正向代理"><a href="#2、node正向代理" class="headerlink" title="2、node正向代理"></a>2、node正向代理</h4><p>在<code>webpack</code>中可以配置<code>proxy</code>来快速获得接口代理的能力。</p><p>vue-cli3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; <br>    <span class="hljs-attr">devServer</span>: &#123;   <br>         <span class="hljs-attr">port</span>: <span class="hljs-number">8000</span>,   <br>         <span class="hljs-attr">proxy</span>: &#123;    <br>              <span class="hljs-string">&quot;/api&quot;</span>: &#123;      <br>                  <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://localhost:8080&quot;</span>     <br>              &#125;   <br>         &#125;  &#125;&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="3、Nginx-反向代理"><a href="#3、Nginx-反向代理" class="headerlink" title="3、Nginx 反向代理"></a>3、Nginx 反向代理</h4><h4 id="4、JSONP"><a href="#4、JSONP" class="headerlink" title="4、JSONP"></a>4、JSONP</h4><h4 id="5、Websocket"><a href="#5、Websocket" class="headerlink" title="5、Websocket"></a>5、Websocket</h4><h3 id="为什么需要跨域"><a href="#为什么需要跨域" class="headerlink" title="为什么需要跨域"></a>为什么需要跨域</h3><p>跨域只存在浏览器端，而浏览器为web提供入口，我们可以在浏览器打开很多页面，所以林子大了什么都有，我们需要一个统一的规范来来保障安全性。</p><h3 id="封装步骤"><a href="#封装步骤" class="headerlink" title="封装步骤"></a>封装步骤</h3><p>1、创建对象</p><p>2、初始化，设置请求的类型和URL</p><p>3、发送请求</p><p>4、进行事件绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>       <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>);<br>       <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.result&quot;</span>);<br>       btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>           <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>           xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8080/serve?a=1&amp;b=3&amp;c=8&quot;</span>);<br>           xhr.<span class="hljs-title function_">send</span>();<br>           xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>               <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>                   <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>                       <span class="hljs-comment">// 状态码</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">status</span>);<br>                       <span class="hljs-comment">// 状态字符串 ok</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">statusText</span>);<br>                       <span class="hljs-comment">// 所有响应头</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">getAllResponseHeaders</span>);<br>                       <span class="hljs-comment">// 响应体</span><br>                       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>);<br>                       result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>;<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;)<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>超文本传输协议</p><h4 id="请求报文："><a href="#请求报文：" class="headerlink" title="请求报文："></a>请求报文：</h4><p>请求行 ：POST  HTTP&#x2F;1.1</p><p>请求头：网址</p><p>空行</p><p>请求体：username&#x3D;liuxu&amp;&amp;password&#x3D;123456</p><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>行：HTTP  200 ok      </p><p>404:找不到</p><p>403：请求路径url错误</p><p>401：未授权</p><p>500：内部错误</p><p>头</p><p>空行</p><p>体</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/26/Github%E4%B8%8A%E4%BC%A0/"/>
    <url>/2022/03/26/Github%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Github上传"><a href="#Github上传" class="headerlink" title="Github上传"></a>Github上传</h1><span id="more"></span><h1 id="github上传文件"><a href="#github上传文件" class="headerlink" title="github上传文件"></a>github上传文件</h1><h2 id="第一种从零开始"><a href="#第一种从零开始" class="headerlink" title="第一种从零开始"></a>第一种从零开始</h2><p>1、在github上创建仓库，命个名，然后写个项目介绍，其它不用选，然后直接创建就可以</p><p>2、创建完成后然后在本地创建一个项目文件夹</p><p>3,然后在这个文件夹下打开git命令行下面的操作</p><p>4、</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> init<br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> README.md<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;first commit&quot;</span><br><span class="hljs-symbol">git</span> branch -M main<br><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/liuxu928/dsfdfdsdf.git</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin main<br></code></pre></td></tr></table></figure><pre><code class="hljs"> ![image-20220415225711830](Github上传/image-20220415225711830.png)</code></pre><p>5、这样仓库就创建好了</p><p>6、就可以在里面写项目了，然后下次更新</p><p>7、(1)git add .(2)git commit -m “第二次上传”(3)git push</p><h2 id="第二种项目写到一半需要上传"><a href="#第二种项目写到一半需要上传" class="headerlink" title="第二种项目写到一半需要上传"></a>第二种项目写到一半需要上传</h2><p>1、在github上创建仓库，命个名，然后写个项目介绍，其它不用选，然后直接创建就可以</p><p>2、然后在已经写得项目中打开git命令行下面的操作</p><p>3、然后执行git init 进行初始化</p><p>4、然后执行前两步</p><p>（1）git remote add origin <a href="https://github.com/liuxu928/vue-rabbit.git">https://github.com/liuxu928/vue-rabbit.git</a><br>（2）git branch -M main</p><p>然后执行</p><p>(1)git add .(2)git commit -m “第一次上传</p><p>然后执行第三步</p><p>git push -u origin main</p><p>下面是整体的步骤，中间有省略</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/liuxu928/</span>vue-rabbit.git<br>git branch -M main<br>git push -u origin main<br></code></pre></td></tr></table></figure><p><img src="/2022/03/26/Github%E4%B8%8A%E4%BC%A0/image-20220415231138379.png" alt="image-20220415231138379"></p><p>5、(1)git add .(2)git commit -m “第二次上传”(3)git push</p><h3 id="hexo上传"><a href="#hexo上传" class="headerlink" title="hexo上传"></a>hexo上传</h3><p>hexo g</p><p>hexo d</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/25/vue-router/"/>
    <url>/2022/03/25/vue-router/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE-ROUTER"><a href="#VUE-ROUTER" class="headerlink" title="VUE-ROUTER"></a>VUE-ROUTER</h1><span id="more"></span><p>1安装vue-rouer   npm instal vue-router@4</p><p>2创建需要映射的组件</p><p>3创建router.js文件进行配置</p><p>（1）配置映射关系</p><p>（2）创建路由router</p><p>（3）导出路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About.vue&#x27;</span><br><br><br><span class="hljs-comment">// 配置映射关系</span><br><span class="hljs-keyword">const</span> routes = [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>    &#125;,<br>    <span class="hljs-comment">// 网站重定向</span><br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 创建路由router</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    routes,<br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>()<br>&#125;)<br><br><span class="hljs-comment">// 导出路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>4main.js使用路由app.use(router)</p><p>5router-link和router-view（占位）</p><h3 id="router-link属性"><a href="#router-link属性" class="headerlink" title="router-link属性"></a>router-link属性</h3><p>to属性</p><p>replace属性：不能返回上一页，返回就退出</p><p>active-class可以更改class名字默认是router-link-active</p><p>exact-active-class精准匹配</p><h3 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h3><p>懒加载就是在导入组件的时候使用箭头函数的方式导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import Home from &#x27;../pages/Home.vue&#x27;</span><br><span class="hljs-comment">// import About from &#x27;../pages/About.vue&#x27;</span><br><br><br><span class="hljs-comment">// 配置映射关系</span><br><span class="hljs-keyword">const</span> routes = [&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>    <span class="hljs-comment">//这就实现了路由的懒加载</span><br>            <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;home-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/Home.vue&quot;</span>)<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>            <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;abou-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/About.vue&quot;</span>)<br>    &#125;,<br>    <span class="hljs-comment">// 网站重定向</span><br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>打包的时候会命名</p><p>魔法注释&#x2F;<em>webpackChunkName:”home-chunk”</em>&#x2F;</p><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>配置中不写死</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>     <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/:username/id/:id&quot;</span>,<br>     <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>         <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;abou-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/User.vue&quot;</span>)<br> &#125;,<br></code></pre></td></tr></table></figure><p>notfund页面,同样也是匹配一个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> &#123;<br>        <span class="hljs-comment">// 匹配错误网址</span><br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathmatch(.*)&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span><br>            <span class="hljs-keyword">import</span> ( <span class="hljs-comment">/*webpackChunkName:&quot;abou-chunk&quot;*/</span> <span class="hljs-string">&quot;../pages/NotFound.vue&quot;</span>)<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>就是在index.js中配置children属性，然后配置路径。进而实现组件页面间的跳转</p><p>可以通过插槽的方式设置跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- router-link 的扩展用法 --&gt;<br>   &lt;!-- custom把a跳转去掉。设置成自定义 --&gt;<br>   &lt;!-- 通过插槽的模式 --&gt;<br>   &lt;!-- 点击自动跳转props.navigate --&gt;<br>   &lt;router-link to=&quot;/home&quot; v-slot=&quot;props&quot; custom&gt;<br>         &lt;button @click=&quot;props.navigate&quot;&gt;首页&lt;/button&gt;<br>   &lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>如果想跟组件显示加个动画，或者希望组件缓存起来就需要使用插槽方式的显示方式router-view</p><h3 id="动态添加路由"><a href="#动态添加路由" class="headerlink" title="动态添加路由"></a>动态添加路由</h3><p>拿到自己路由里面的数据方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>      <span class="hljs-comment">// vue2拿路径方法</span><br>      <span class="hljs-comment">// created()&#123;</span><br>      <span class="hljs-comment">//     console.log(this.$route.params.username);</span><br>      <span class="hljs-comment">// &#125;</span><br>      <span class="hljs-comment">// vue3拿路径方法</span><br>      <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-keyword">const</span> route=<span class="hljs-title function_">useRoute</span>();<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">username</span>);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>在跳转的时候阻止跳转进行登录的案例</p><p>进行路由跳转就跳到登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">// 导出路由</span><br>    <span class="hljs-comment">// 导航守卫</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进行了路由的跳转&quot;</span>);<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> !== <span class="hljs-string">&quot;/login&quot;</span>) &#123;<br>        <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!token) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/login&quot;</span><br>        &#125;<br>    &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>在登陆页面点击后就保存一个token，然后自动跳转到首页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;LoginClick&quot;&gt;登录&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    import &#123;useRouter&#125; from &#x27;vue-router&#x27;<br>    export default &#123;<br>       setup()&#123;<br>           const router=useRouter();<br>           const LoginClick=()=&gt;&#123;<br>               window.localStorage.setItem(&quot;token&quot;,&quot;liuxu&quot;)<br>               router.push(&#123;<br>                   path:&quot;/home&quot;<br>               &#125;)<br>           &#125;<br>           return&#123;<br>               LoginClick<br>           &#125;<br>       &#125; <br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1安装npm install vuex@next</p><p>2创建store，建立js文件从vuex中导入Createstore</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>    <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">counter</span>: <span class="hljs-number">100</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>++<br>        &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">counter</span>--<br>        &#125;<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>注意这里的方法传的有一个state参数，通过参数来调用数据改变</p><p>数据放到state函数中，方法放到mutations对象中</p><p>3像路由一样需要在index.js中使用，像使用插件一样</p><p>4需要先发送一个commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;<br>    &lt;button @click=&quot;decrement&quot;&gt;-1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    methods:&#123;<br>      increment()&#123;<br>        this.$store.commit(&quot;increment&quot;)<br>      &#125;,<br>      decrement()&#123;<br>        this.$store.commit(&quot;decrement&quot;)<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>再别的组件中获取是$store.state.counter</p><h3 id="5大核心"><a href="#5大核心" class="headerlink" title="5大核心"></a>5大核心</h3><p>state,getters,mutation,action,mudules</p><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>vue2用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>       <span class="hljs-comment">// 可以传个数组，也可以传个对象</span><br>       <span class="hljs-comment">// 传个对象可以改名字</span><br>       <span class="hljs-comment">// 加3个点进行解构</span><br>       ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;counter&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;height&quot;</span>])<br>       <span class="hljs-comment">// 下面传对象的</span><br>       <span class="hljs-comment">// ...mapState(&#123;</span><br>       <span class="hljs-comment">//     sCounter:state=&gt;state.counter,</span><br>       <span class="hljs-comment">//     sName:state=&gt;state.name</span><br>       <span class="hljs-comment">// &#125;)</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>vue3用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;mapState,useStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> store=<span class="hljs-title function_">useStore</span>();<br>        <span class="hljs-comment">// 这是单个获取</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Sname</span>=<span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>store.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>);<br><br>        <span class="hljs-keyword">const</span> storeStates=<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;height&quot;</span>]);<br>        <span class="hljs-keyword">const</span> storeState=&#123;&#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(storeStates));<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(storeStates).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">keyFn</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> fn=storeStates[keyFn].<span class="hljs-title function_">bind</span>(&#123;<span class="hljs-attr">$store</span>:store&#125;);<br>            storeState[keyFn]=<span class="hljs-title function_">computed</span>(fn);<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-title class_">Sname</span>,<br>            ...storeState<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h4><p>vue2是实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">import</span> &#123;mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>     <span class="hljs-comment">// vue2实现</span><br>  <span class="hljs-attr">computed</span>:&#123;<br>           ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&quot;nameInfo&quot;</span>,<span class="hljs-string">&quot;ageInfo&quot;</span>,<span class="hljs-string">&quot;heightInfo&quot;</span>]),<br>           ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>               <span class="hljs-title class_">SnameInfo</span>:<span class="hljs-string">&quot;nameInfo&quot;</span>,<br>               <span class="hljs-title class_">SageInfo</span>:<span class="hljs-string">&quot;ageInfo&quot;</span>,<br>           &#125;),<br>  &#125;,  <br> &#125;<br><br></code></pre></td></tr></table></figure><p>vue3实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../hooks/useGetters&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>   <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//    const store=useStore();</span><br>    <span class="hljs-comment">//    const nameInfo=computed(()=&gt;store.getters.nameInfo);</span><br>    <br>    <span class="hljs-keyword">const</span> stateGetters=<span class="hljs-title function_">useGetters</span>([<span class="hljs-string">&quot;nameInfo&quot;</span>,<span class="hljs-string">&quot;ageInfo&quot;</span>,<span class="hljs-string">&quot;heightInfo&quot;</span>]);<br>       <span class="hljs-keyword">return</span>&#123;<br>           ...stateGetters<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mapMutation"><a href="#mapMutation" class="headerlink" title="mapMutation"></a>mapMutation</h4><p>store.commit()中可以传两个参数，一个是对应的index.js中的方法名，另一个是个对象，对象中可以传信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;hr&gt;<br>      &lt;h2&gt;当前计数：&#123;&#123;$store.state.counter&#125;&#125;&lt;/h2&gt;<br>      &lt;button @click=&quot;incrementN(10)&quot;&gt;+10&lt;/button&gt;<br>      &lt;button @click=&quot;decrementN(100)&quot;&gt;-100&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>    <br>&lt;script&gt;<br>    import &#123;useStore,mapMutations&#125; from &quot;vuex&quot;<br>    export default &#123;<br>       setup()&#123;<br>        const mutationsState=mapMutations([&quot;incrementN&quot;,&quot;decrementN&quot;]);<br><br>           return&#123;<br>              ...mutationsState<br>           &#125;<br>       &#125;,<br><br>    &#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>​     </p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/23/Flex%E5%B8%83%E5%B1%80/"/>
    <url>/2022/03/23/Flex%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><span id="more"></span><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li><li><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071005.png" alt="img"></li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>nowrap 不换行</p><p> wrap 换行</p><p>wrap-reverse;换行，第一行在下方。</p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>是flex-direction和flex-wrap的合并，默认是row和nowrap</p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>定义项目在主轴的对齐方式</p><ul><li><p><code>flex-start</code>（默认值）：左对齐</p></li><li><p><code>flex-end</code>：右对齐</p></li><li><p><code>center</code>： 居中</p></li><li><p><code>space-between</code>：两端对齐，项目之间的间隔都相等。</p></li><li><p><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p><p><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071010.png" alt="img"></p></li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>定义项目在交叉轴上的对齐方式</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li><li><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071011.png" alt="img"></li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li><li><img src="/2022/03/23/Flex%E5%B8%83%E5%B1%80/bg2015071012.png" alt="img"></li></ul><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h3><p>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0，可以为负数</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h3><p>性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h3><p>属性定义了在分配多余空间之前，项目占据的主轴空间；浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h3><p>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><ul><li><p><code>flex-start</code>：交叉轴的起点对齐。</p></li><li><p><code>flex-end</code>：交叉轴的终点对齐。</p></li><li><p><code>center</code>：交叉轴的中点对齐。</p></li><li><p><code>baseline</code>: 项目的第一行文字的基线对齐。</p></li><li><p><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p><p>·····································</p><h2 id="借鉴网站"><a href="#借鉴网站" class="headerlink" title="借鉴网站"></a>借鉴网站</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><h3 id="麻将案例"><a href="#麻将案例" class="headerlink" title="麻将案例"></a>麻将案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>麻将案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/2麻将.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bigbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box4&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box5&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box6&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box7&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box8&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box box9&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-id">#bigbox</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>    <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span>,<br><span class="hljs-selector-class">.box3</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-selector-class">.box2</span>&gt;<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>),<br><span class="hljs-selector-class">.box3</span>&gt;<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br><br><span class="hljs-selector-class">.box3</span>&gt;<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box4</span>,<br><span class="hljs-selector-class">.box5</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">align-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.one</span> &#123;<br>    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.box5</span> <span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">21px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box6</span>,<br><span class="hljs-selector-class">.box8</span>,<br><span class="hljs-selector-class">.box9</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">justify-content</span>: space-around;<br>    <span class="hljs-attribute">align-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span>&gt;<span class="hljs-selector-class">.two</span> &#123;<br>    <span class="hljs-comment">/* flex-basis: 100%; */</span><br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> <span class="hljs-selector-class">.two</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> <span class="hljs-selector-class">.two</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.box7</span> <span class="hljs-selector-class">.two</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <url>/2022/03/21/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><span id="more"></span><p>变量提升：就是在变量还没定义之前就能访问的到</p><p>函数提升：就是在函数定义之前就可以调用执行这个函数</p><p>递归调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;gb:&quot;</span> + i);<br>       <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br>       <span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>);<br><br>       <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">i</span>) &#123;<br>           <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br>               <span class="hljs-keyword">return</span><br>           &#125;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fb:&#x27;</span> + i);<br>           <span class="hljs-title function_">foo</span>(i + <span class="hljs-number">1</span>);<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fe:&#x27;</span> + i);<br>       &#125;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ge:&#x27;</span> + i);<br>       <span class="hljs-comment">// 输出一次为</span><br>       <span class="hljs-comment">// gb: undefined</span><br>       <span class="hljs-comment">// fb: 1</span><br>       <span class="hljs-comment">// fb: 2</span><br>       <span class="hljs-comment">// fb: 3</span><br>       <span class="hljs-comment">// fe: 3</span><br>       <span class="hljs-comment">// fe: 2</span><br>       <span class="hljs-comment">// fe: 1</span><br>       <span class="hljs-comment">// ge: 1</span><br></code></pre></td></tr></table></figure><p>变量提升面试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>   <span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-title function_">fn</span>()<span class="hljs-comment">//undefined</span><br><span class="hljs-comment">// 面试1</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;<br>        <span class="hljs-keyword">var</span> a;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a);<br>        <span class="hljs-comment">// 面试2</span><br>        <span class="hljs-keyword">if</span> (!(b <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) &#123;<br>            <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>        <span class="hljs-comment">// 面试3</span><br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">c</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br>        &#125;<br>        <span class="hljs-title function_">c</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/%E9%97%AD%E5%8C%85/"/>
    <url>/2022/03/21/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><span id="more"></span><p>闭包定义：闭包是嵌套的内部函数；包含被引用变量的对象</p><p>闭包产生的条件：（1）函数嵌套（2）内部函数引用了外部函数的数据</p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>使用函数内部的变量在在函数执行完毕以后，依然存活在内存中，延长局部变量的生命周期 </p><p>让函数外部可以操作函数内部的数据 </p><h2 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h2><p>返回一个对象的函数&#x3D;&#x3D;&#x3D;》工厂函数</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>把代码分为全局区域和函数区域</p><p>好处：隔离变量，就是可以再不同的作用域定义相同的名称的变量而不冲突</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><span id="more"></span><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>面试：（每个函数都有一个protype属性，也叫函数的显示原型，他默认指向一个Object对象，每个实例对象都有一个__proto__属性，称为隐式原型，实例对象的隐式原型等于他构造函数的显示原型。这就是对原型的理解！）</p><p>每一个函数都有一个prototype属性，他默认指向一个Object空对象（即：原型对象 ）；</p><p>每个原型对象中有一个constructor属性，它指向函数对象；</p><p>给原型对象添加属性，它的实例对象也能访问</p><h2 id="显式原型和隐式原型"><a href="#显式原型和隐式原型" class="headerlink" title="显式原型和隐式原型"></a>显式原型和隐式原型</h2><p>原型就是一个公共的区域</p><p>作用：以后创建实例对象的时候，可以将这些对象公有的方法或者属性，统一添加到构造函数的原型上去，这样就不用往每个对象上都添加了，也不会影响全局作用域，而且每个对象也可以使用这些方法或者属性了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>) &#123;<br><br>       &#125;<br>       <span class="hljs-comment">// 每个函数上都有一个prototype属性， 默认值指向object空对象，即显式原型</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>       <span class="hljs-comment">// 每一个实例对象都有一个__proto__属性。默认值为构造函数的prototype的值，即隐式原型</span><br>       <span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>();<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span>);<br>       <span class="hljs-comment">// 对象的隐式原型的值等于对应的构造函数的显式原型的值</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>面试（当我们访问对象的属性或者是方法的时候，它会在自身寻找，自身找不到就去原型对象中寻找，如果找到就是用，没找到就只去原型对象的原型上去找，直到找到object对象的原型，object对象的原型没有原型，object.prototype就是原型链的尽头，如果还没找到就返回undefined，这一个过程就叫做 原型链）</p><p>当我们访问对象的一个属性或者方法的时候，他会在自身中寻找，如果找到则直接使用，如果没找到就去原型对象中寻找，如果找到就直接使用，如果还没有就去原型的原型上找，直到找到Object对象的原型，这个object对象的原型没有原型，,Object对象的原型就是原型链的尽头，如果Object对象中依旧没找到，则返回是undefined(隐式原型链)</p><p>!(D:\学习资料\blog\liuxu928\source_posts\images\原型和原型链.png) </p><p><img src="/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.png"></p><p><strong>所有实例对象的隐式原型都等于其构造函数的显示原型</strong> </p><p>Function.prototype. <strong>proto</strong>  &#x3D;Object.prototype&#x3D;fn.<strong>proto</strong>.<strong>proto</strong></p><p>function Function(){}</p><p>var fn&#x3D;new Function() ；</p><p><strong>所有的函数都是Function的实例对象</strong></p><p>Function.prototype&#x3D;Function.<strong>proto</strong></p><p>在读取对象属性的时候如果没有就会去原型链上寻找，在设置对象属性的时候不会去查找原型链，如果自身没有这个属性，就直接加上这个属性</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) &#123;<br><br>      &#125;<br>      A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">n</span> = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>      A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>          <span class="hljs-attr">n</span>: <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">m</span>: <span class="hljs-number">3</span><br>      &#125;<br>      <span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">n</span>, b.<span class="hljs-property">m</span>, c.<span class="hljs-property">n</span>, c.<span class="hljs-property">m</span>); <span class="hljs-comment">//1 undefined 2 3</span><br></code></pre></td></tr></table></figure><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/19/js%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/03/19/js%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h1><span id="more"></span><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本（值）类型"><a href="#基本（值）类型" class="headerlink" title="基本（值）类型"></a>基本（值）类型</h3><p>String: 任意字符串 </p><p>number：任意数字</p><p>boolean： true&#x2F;false</p><p>undefined: undefined</p><p>null: null</p><p>symbol</p><h3 id="对象（引用）类型"><a href="#对象（引用）类型" class="headerlink" title="对象（引用）类型"></a>对象（引用）类型</h3><p>Object: 任意对象</p><p>Function： 一种特殊对象，（可以执行）</p><p>Array： 一种特殊数对象，（有数值下标属性，内部数据有序）</p><h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>typeof：返回数据类型的字符串表达；不能判断null类型和array类型</p><p>&#x3D;&#x3D;&#x3D; 只能判断undefined和null类型</p><p>instanceof  </p><h4 id="判断案例"><a href="#判断案例" class="headerlink" title="判断案例"></a>判断案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = &#123;<br>           <span class="hljs-attr">a2</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>],<br>           <span class="hljs-attr">a3</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a3&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;liuxu&#x27;</span>);<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1, <span class="hljs-keyword">typeof</span> a1 === <span class="hljs-string">&#x27;object&#x27;</span>); <span class="hljs-comment">//object true//返回的是数据类型的字符串表达形式</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); <span class="hljs-comment">//true</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1.<span class="hljs-property">a3</span>); <span class="hljs-comment">//function</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a3</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">//true</span><br>       a1.<span class="hljs-title function_">a3</span>()() <span class="hljs-comment">//liuxu</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a2</span>[<span class="hljs-number">2</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">//true</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1.<span class="hljs-property">a2</span>[<span class="hljs-number">2</span>]); <span class="hljs-comment">//&#x27;function&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="undefined和null的区别？"><a href="#undefined和null的区别？" class="headerlink" title="undefined和null的区别？"></a>undefined和null的区别？</h3><p>undefined是代表定义了但是没有赋值，null是定义并且赋值了但是赋值为null</p><h3 id="什么时候给变量赋值为null"><a href="#什么时候给变量赋值为null" class="headerlink" title="什么时候给变量赋值为null?"></a>什么时候给变量赋值为null?</h3><p>让赋值的变量成为垃圾对象被垃圾回收器回收，出事赋值表示要赋值为对象</p><h2 id="数据变量内存"><a href="#数据变量内存" class="headerlink" title="数据变量内存"></a>数据变量内存</h2><h3 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h3><p>存储在内存中代表特定信息的东西</p><p>特点：可运算，可传递</p><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>可变化的数据，由变量名和变量值组成，每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是在内存中保护的</p><h3 id="什么是内存？"><a href="#什么是内存？" class="headerlink" title="什么是内存？"></a>什么是内存？</h3><p>就是内存条通电以后产生的可以存储数据的空间</p><h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><p>内存是用来存储数据的空间，变量是内存的标识</p><h3 id="var-a-x3D-xxx-a内存中保存的到底是什么？"><a href="#var-a-x3D-xxx-a内存中保存的到底是什么？" class="headerlink" title="var a&#x3D;xxx,a内存中保存的到底是什么？"></a>var a&#x3D;xxx,a内存中保存的到底是什么？</h3><p>xxx为基本类型的时候，保存的就是这个数据</p><p>xxx为对象时，保存的就是对象的地址值</p><p>xxx为变量时，保存的可能是基本数值，也可能是对象的地址值</p><h3 id="引用赋值问题"><a href="#引用赋值问题" class="headerlink" title="引用赋值问题**"></a>引用赋值问题**</h3><p>2个引用变量指向同一个对象的时候，，一个变量修改对象的内部,另一个引用变量都能看到修改以后的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引用变量赋值</span><br>     <span class="hljs-keyword">let</span> obj1 = &#123;<br>         <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span><br>     &#125;;<br>     <span class="hljs-keyword">let</span> obj2 = obj1;<br>     obj2.<span class="hljs-property">age</span> = <span class="hljs-number">12</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">age</span>);<span class="hljs-comment">//12</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">obj</span>) &#123;<br>         obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;A&#x27;</span><br>     &#125;<br>     <span class="hljs-title function_">f1</span>(obj1);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">name</span>, <span class="hljs-string">&#x27;----&#x27;</span>);<span class="hljs-comment">//A----</span><br></code></pre></td></tr></table></figure><p>2个引用变量指向同一个对象的时候，让其中的引用变量指向另一个对象，另一个引用变量依然指向前一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-keyword">let</span> b = a;<br>a = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;BOB&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;;<br>b.<span class="hljs-property">age</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>, b.<span class="hljs-property">name</span>, a.<span class="hljs-property">age</span>); <span class="hljs-comment">//6 undefined  20</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">obj</span>) &#123;<br>    obj = &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br>&#125;<br><span class="hljs-title function_">f2</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>);<span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><h3 id="js传递变量参数时，是值传递还是引用传递？"><a href="#js传递变量参数时，是值传递还是引用传递？" class="headerlink" title="js传递变量参数时，是值传递还是引用传递？"></a>js传递变量参数时，是值传递还是引用传递？</h3><p>可能是值传递，也有可能是引用传递（地址值）也可以理解为都是值传递（基本值传递，地址值传递）</p><h3 id="js引擎如何进行内存管理"><a href="#js引擎如何进行内存管理" class="headerlink" title="js引擎如何进行内存管理"></a>js引擎如何进行内存管理</h3><p>释放内存：</p><p>局部变量：函数执行完以后自动释放；</p><p>对象：先成为垃圾对象&#x3D;&#x3D;》然后被垃圾回收器回收</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="什么是对象？为什么用"><a href="#什么是对象？为什么用" class="headerlink" title="什么是对象？为什么用"></a>什么是对象？为什么用</h3><p>拥有属性和方法的数据，用来保存多个数据的容器</p><p>统一管理多个数据</p><p>方法是特殊的属性&#x3D;&#x3D;》属性值是函数</p><h4 id="对象使用中什么时候必须使用-“属性名”-？"><a href="#对象使用中什么时候必须使用-“属性名”-？" class="headerlink" title="对象使用中什么时候必须使用[“属性名”]？"></a>对象使用中什么时候必须使用[“属性名”]？</h4><p>1属性名中包含特殊字符：- 空格</p><p>2属性名不确定</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>是什么？可以执行，实现一定功能的封装体 </p><p>为什么？提高代码的复用，便于阅读</p><p>怎么封装？函数声明，表达式</p><h4 id="什么函数是回调函数？"><a href="#什么函数是回调函数？" class="headerlink" title="什么函数是回调函数？"></a>什么函数是回调函数？</h4><p>1你定义的</p><p>2你没有调</p><p>3最终它执行了</p><p>常见回调函数&#x3D;&#x3D;&#x3D;&gt;dom事件回调函数，定时器</p><h3 id="IIFE函数"><a href="#IIFE函数" class="headerlink" title="IIFE函数"></a>IIFE函数</h3><p>匿名自调用函数（立即调用函数表达式）</p><p>作用：隐藏实现，不会污染全局命名空间，用它来编写js模块</p><h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h3><p>如果没有指定就是指window</p><p>所有函数内部都有一个变量this</p><p>它的值是调用函数的当前对象</p><h4 id="如何确定this的值？"><a href="#如何确定this的值？" class="headerlink" title="如何确定this的值？"></a>如何确定this的值？</h4><p>test()指window</p><p>p.test()指p</p><p>new test（）指新建的对象</p><p>p.call(obj)：obj</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/18/Nodejs/"/>
    <url>/2022/03/18/Nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="学习Nodejs总结"><a href="#学习Nodejs总结" class="headerlink" title="学习Nodejs总结"></a>学习Nodejs总结</h1><span id="more"></span><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><h4 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h4><p>3个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="fs-writeFile"><a href="#fs-writeFile" class="headerlink" title="fs.writeFile"></a>fs.writeFile</h4><p>3个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&quot;./files/2.txt&quot;</span>, <span class="hljs-string">&quot;正在努力中....&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入失败&quot;</span> + err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入成功&quot;</span> + dataStr);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><h4 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a>path.join</h4><p>拼接地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><br>fs.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/files/1.txt&#x27;</span>), <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span>;<br><span class="hljs-comment">// const Npath = path.basename(fpath);</span><br><span class="hljs-comment">// console.log(Npath); //index.html</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Npath</span> = path.<span class="hljs-title function_">basename</span>(fpath, <span class="hljs-string">&#x27;.html&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Npath</span>); <span class="hljs-comment">//index</span><br></code></pre></td></tr></table></figure><h4 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Npath</span> = path.<span class="hljs-title function_">extname</span>(fpath);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Npath</span>); <span class="hljs-comment">//.html</span><br></code></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="req-amp-amp-res"><a href="#req-amp-amp-res" class="headerlink" title="req&amp;&amp;res"></a>req&amp;&amp;res</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br>http.<span class="hljs-title function_">createServer</span>().<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req的url和method可以分别获取地址和请求类型</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`你的请求地址是<span class="hljs-subst">$&#123;req.url&#125;</span>,请求类型是<span class="hljs-subst">$&#123;req.method&#125;</span>`</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>    <span class="hljs-comment">// 出现中文乱码解决</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27; text/html;charset=utf-8&#x27;</span>)<br>        <span class="hljs-comment">// res.end向服务器响应一些内容，在页面中展示</span><br>    res.<span class="hljs-title function_">end</span>(str)<br><br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动127.0.0.1：8080！！&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>res.end也很重要</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h4 id="nrm-和i5ting-toc"><a href="#nrm-和i5ting-toc" class="headerlink" title="nrm,和i5ting_toc"></a>nrm,和i5ting_toc</h4><p>安装导入功能开源协议ISC</p><p>npm login</p><p>npm publish</p><p>npm unpublish baoming –force</p><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p>安装express命令 npm install <a href="mailto:&#101;&#x78;&#112;&#114;&#101;&#115;&#115;&#x40;&#52;&#46;&#49;&#55;&#x2e;&#49;">&#101;&#x78;&#112;&#114;&#101;&#115;&#115;&#x40;&#52;&#46;&#49;&#55;&#x2e;&#49;</a></p><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>安装命令npm install nodemon -g</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 定义一个全局中间件</span><br><span class="hljs-comment">// 中间件作用： 可以共享同一份req和res</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全局中间件执行了&quot;</span>);<br>    <span class="hljs-comment">// 把流转关系转交给下一个中间件或路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get /&quot;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get user&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get user&quot;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>后面中间件或者路由都能拿到共享数据req，和res</p><h4 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 局部中间件不使用app.use()</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw1</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;局部中间件执行了第一个&quot;</span>);<br>    <span class="hljs-comment">// 调用next传给下个中间件或者路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw2</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;局部中间件执行了第二个&quot;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get /&quot;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, mw1, mw2, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get user&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get user&quot;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h4><p>必须注册在所有路由之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;服务器内部发生了错误！&quot;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>&#125;)<br>/必须注册在所有路由之后<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发生了错误&quot;</span> + err.<span class="hljs-property">message</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;error&quot;</span> + err.<span class="hljs-property">message</span>)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-comment">// 使用内置中间件，可以解析json格式的数据 </span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><br><span class="hljs-comment">// 使用另一个内置中间件可以解析URL - encoded格式的请求体数据</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><h4 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用第三方组件先安装再导入</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>)<br>    <span class="hljs-comment">// 使用</span><br>app.<span class="hljs-title function_">use</span>(parser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br></code></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><h4 id="使用cors解决跨域"><a href="#使用cors解决跨域" class="headerlink" title="使用cors解决跨域"></a>使用cors解决跨域</h4><p>npm install cors</p><p>导入中间件</p><p>一定在路由之前使用app.use(cors（）)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 配置解析表单数据的中间件</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br><span class="hljs-comment">// 一定要在路由之前进行配置，解决跨域问题</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br><br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./26appRouter&#x27;</span>)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, router)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is running&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="简单请求和遇见请求区别"><a href="#简单请求和遇见请求区别" class="headerlink" title="简单请求和遇见请求区别"></a>简单请求和遇见请求区别</h4><p>简单请求只会发生一次请求</p><p>遇见请求客户端与服务器发生2次请求OPTION请求成功以后才会发起真正的请求</p><h3 id="jwt认证机制"><a href="#jwt认证机制" class="headerlink" title="jwt认证机制"></a>jwt认证机制</h3><p>npm i jsonwebtoken express-jwt</p><h2 id="数据库相关知识补充"><a href="#数据库相关知识补充" class="headerlink" title="数据库相关知识补充"></a>数据库相关知识补充</h2><h3 id="创建过程中的一些不好记的标识"><a href="#创建过程中的一些不好记的标识" class="headerlink" title="创建过程中的一些不好记的标识"></a>创建过程中的一些不好记的标识</h3><p>1、创建数据库</p><p><img src="/2022/03/18/Nodejs/image-20220517155020883.png" alt="image-20220517155020883"></p><p>2、创建数据表</p><p> 创建好数据库，然后点击tables右键然后点第一项创建数据表</p><p>3、设置数据表字段，创建表</p><p>PK（primary key）主键，唯一标识</p><p>NN(not null)不能为空</p><p>UQ(unique)值唯一</p><p>AI(auto increment)值自动增长</p><p>tinyint布尔值</p><p>status表示状态，0表示正常，1表示被禁用了，</p><p>4.插入数据</p><p>点击创建的表右键然后点第一项Select Rows</p><h3 id="mysql执行语句"><a href="#mysql执行语句" class="headerlink" title="mysql执行语句"></a>mysql执行语句</h3><p>– 插入列<br>– INSERT INTO my_db_01.users (username,password) values (‘tony stark’,’098123’)</p><p>– 将id为4的用户密码更新为‘8888’<br>– UPDATE my_db_01.users set password&#x3D;’8888’ WHERE id&#x3D;4<br>– UPDATE my_db_01.users set password&#x3D;’admin123’,status&#x3D;1 WHERE id&#x3D;2</p><p>– 删除表中数据，记得加where控制条件<br>– DELETE FROM my_db_01.users WHERE id&#x3D;4</p><p>– 演示where子句的使用<br>– SELECT * FROM my_db_01.users WHERE status&#x3D;1<br>– SELECT * FROM my_db_01.users WHERE id&gt;&#x3D;2<br>– SELECT * FROM my_db_01.users WHERE username&lt;&gt;’ls’<br>– 使用and<br>– SELECT * FROM my_db_01.users WHERE username&lt;&gt;’ls’ AND id&lt;3<br>– 使用or<br>– SELECT * FROM my_db_01.users WHERE username&#x3D;’zs’ OR status&#x3D;1</p><p>– 使用升序排列  加不加asc一样<br>– SELECT * FROM my_db_01.users order by status</p><p>– desc是降序的方式默认是asc是升序<br>– SELECT * FROM my_db_01.users order by id desc<br>– 多范围排序<br>– SELECT * FROM my_db_01.users order by status desc,username asc</p><p>– 使用count(<em>)统计表中符合条件的数据有几条<br>– SELECT count(</em>) FROM my_db_01.users WHERE status&#x3D;0 </p><p>– 使用as关键字对列设置别名<br>– SELECT username as uname FROM my_db_01.users</p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
