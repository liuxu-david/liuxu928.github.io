<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/21/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <url>/2022/03/21/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><span id="more"></span><p>变量提升：就是在变量还没定义之前就能访问的到</p><p>递归调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;gb:&quot;</span> + i);<br>       <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br>       <span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>);<br><br>       <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">i</span>) &#123;<br>           <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>) &#123;<br>               <span class="hljs-keyword">return</span><br>           &#125;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fb:&#x27;</span> + i);<br>           <span class="hljs-title function_">foo</span>(i + <span class="hljs-number">1</span>);<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fe:&#x27;</span> + i);<br>       &#125;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ge:&#x27;</span> + i);<br>       <span class="hljs-comment">// 输出一次为</span><br>       <span class="hljs-comment">// gb: undefined</span><br>       <span class="hljs-comment">// fb: 1</span><br>       <span class="hljs-comment">// fb: 2</span><br>       <span class="hljs-comment">// fb: 3</span><br>       <span class="hljs-comment">// fe: 3</span><br>       <span class="hljs-comment">// fe: 2</span><br>       <span class="hljs-comment">// fe: 1</span><br>       <span class="hljs-comment">// ge: 1</span><br></code></pre></td></tr></table></figure><p>变量提升面试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>   <span class="hljs-keyword">let</span> a = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-title function_">fn</span>()<span class="hljs-comment">//undefined</span><br><span class="hljs-comment">// 面试1</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;<br>        <span class="hljs-keyword">var</span> a;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a);<br>        <span class="hljs-comment">// 面试2</span><br>        <span class="hljs-keyword">if</span> (!(b <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) &#123;<br>            <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>        <span class="hljs-comment">// 面试3</span><br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">c</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br>        &#125;<br>        <span class="hljs-title function_">c</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/03/20/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><span id="more"></span><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>每一个函数都有一个prototype属性，他默认指向一个Object空对象（即：原型对象 ）；</p><p>每个原型对象中有一个constructor属性，它指向函数对象；</p><p>给原型对象添加属性，它的实例对象也能访问</p><h2 id="显式原型和隐式原型"><a href="#显式原型和隐式原型" class="headerlink" title="显式原型和隐式原型"></a>显式原型和隐式原型</h2><p>原型就是一个公共的区域</p><p>作用：以后创建实例对象的时候，可以将这些对象公有的方法或者属性，统一添加到构造函数的原型上去，这样就不用往每个对象上都添加了，也不会影响全局作用域，而且每个对象也可以使用这些方法或者属性了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>) &#123;<br><br>       &#125;<br>       <span class="hljs-comment">// 每个函数上都有一个prototype属性， 默认值指向object空对象，即显式原型</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>       <span class="hljs-comment">// 每一个实例对象都有一个__proto__属性。默认值为构造函数的prototype的值，即隐式原型</span><br>       <span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>();<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span>);<br>       <span class="hljs-comment">// 对象的隐式原型的值等于对应的构造函数的显式原型的值</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>当我们访问对象的一个属性或者方法的时候，他会在自身中寻找，如果找到则直接使用，如果没找到就去原型对象中寻找，如果找到就直接使用，如果还没有就去原型的原型上找，直到找到Object对象的原型，这个object对象的原型没有原型，,Object对象的原型就是原型链的尽头，如果Object对象中依旧没找到，则返回是undefined(隐式原型链)</p><p><img src="D:\学习资料\blog\liuxu928\source_posts\images\原型和原型链.png"> </p><p><strong>所有实例对象的隐式原型都等于其构造函数的显示原型</strong> </p><p>Function.prototype. <strong>proto</strong>  &#x3D;Object.prototype&#x3D;fn.<strong>proto</strong>.<strong>proto</strong></p><p>function Function(){}</p><p>var fn&#x3D;new Function() ；</p><p><strong>所有的函数都是Function的实例对象</strong></p><p>Function.prototype&#x3D;Function.<strong>proto</strong></p><p>在读取对象属性的时候如果没有就会去原型链上寻找，在设置对象属性的时候不会去查找原型链，如果自身没有这个属性，就直接加上这个属性</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) &#123;<br><br>      &#125;<br>      A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">n</span> = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>      A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>          <span class="hljs-attr">n</span>: <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">m</span>: <span class="hljs-number">3</span><br>      &#125;<br>      <span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">n</span>, b.<span class="hljs-property">m</span>, c.<span class="hljs-property">n</span>, c.<span class="hljs-property">m</span>); <span class="hljs-comment">//1 undefined 2 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/19/js%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/03/19/js%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="js高级"><a href="#js高级" class="headerlink" title="js高级"></a>js高级</h1><span id="more"></span><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本（值）类型"><a href="#基本（值）类型" class="headerlink" title="基本（值）类型"></a>基本（值）类型</h3><p>String: 任意字符串 </p><p>number：任意数字</p><p>boolean： true&#x2F;false</p><p>undefined: undefined</p><p>null: null</p><p>symbol</p><h3 id="对象（引用）类型"><a href="#对象（引用）类型" class="headerlink" title="对象（引用）类型"></a>对象（引用）类型</h3><p>Object: 任意对象</p><p>Function： 一种特殊对象，（可以执行）</p><p>Array： 一种特殊数对象，（有数值下标属性，内部数据有序）</p><h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>typeof：返回数据类型的字符串表达；不能判断null类型和array类型</p><p>&#x3D;&#x3D;&#x3D; 只能判断undefined和null类型</p><p>instanceof  </p><h4 id="判断案例"><a href="#判断案例" class="headerlink" title="判断案例"></a>判断案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a1 = &#123;<br>           <span class="hljs-attr">a2</span>: [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>],<br>           <span class="hljs-attr">a3</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a3&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;liuxu&#x27;</span>);<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1, <span class="hljs-keyword">typeof</span> a1 === <span class="hljs-string">&#x27;object&#x27;</span>); <span class="hljs-comment">//object true//返回的是数据类型的字符串表达形式</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); <span class="hljs-comment">//true</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1.<span class="hljs-property">a3</span>); <span class="hljs-comment">//function</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a3</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">//true</span><br>       a1.<span class="hljs-title function_">a3</span>()() <span class="hljs-comment">//liuxu</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1.<span class="hljs-property">a2</span>[<span class="hljs-number">2</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>); <span class="hljs-comment">//true</span><br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a1.<span class="hljs-property">a2</span>[<span class="hljs-number">2</span>]); <span class="hljs-comment">//&#x27;function&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="undefined和null的区别？"><a href="#undefined和null的区别？" class="headerlink" title="undefined和null的区别？"></a>undefined和null的区别？</h3><p>undefined是代表定义了但是没有赋值，null是定义并且赋值了但是赋值为null</p><h3 id="什么时候给变量赋值为null"><a href="#什么时候给变量赋值为null" class="headerlink" title="什么时候给变量赋值为null?"></a>什么时候给变量赋值为null?</h3><p>让赋值的变量成为垃圾对象被垃圾回收器回收，出事赋值表示要赋值为对象</p><h2 id="数据变量内存"><a href="#数据变量内存" class="headerlink" title="数据变量内存"></a>数据变量内存</h2><h3 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h3><p>存储在内存中代表特定信息的东西</p><p>特点：可运算，可传递</p><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>可变化的数据，由变量名和变量值组成，每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是在内存中保护的</p><h3 id="什么是内存？"><a href="#什么是内存？" class="headerlink" title="什么是内存？"></a>什么是内存？</h3><p>就是内存条通电以后产生的可以存储数据的空间</p><h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><p>内存是用来存储数据的空间，变量是内存的标识</p><h3 id="var-a-x3D-xxx-a内存中保存的到底是什么？"><a href="#var-a-x3D-xxx-a内存中保存的到底是什么？" class="headerlink" title="var a&#x3D;xxx,a内存中保存的到底是什么？"></a>var a&#x3D;xxx,a内存中保存的到底是什么？</h3><p>xxx为基本类型的时候，保存的就是这个数据</p><p>xxx为对象时，保存的就是对象的地址值</p><p>xxx为变量时，保存的可能是基本数值，也可能是对象的地址值</p><h3 id="引用赋值问题"><a href="#引用赋值问题" class="headerlink" title="引用赋值问题**"></a>引用赋值问题**</h3><p>2个引用变量指向同一个对象的时候，，一个变量修改对象的内部,另一个引用变量都能看到修改以后的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引用变量赋值</span><br>     <span class="hljs-keyword">let</span> obj1 = &#123;<br>         <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span><br>     &#125;;<br>     <span class="hljs-keyword">let</span> obj2 = obj1;<br>     obj2.<span class="hljs-property">age</span> = <span class="hljs-number">12</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">age</span>);<span class="hljs-comment">//12</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">obj</span>) &#123;<br>         obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;A&#x27;</span><br>     &#125;<br>     <span class="hljs-title function_">f1</span>(obj1);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">name</span>, <span class="hljs-string">&#x27;----&#x27;</span>);<span class="hljs-comment">//A----</span><br></code></pre></td></tr></table></figure><p>2个引用变量指向同一个对象的时候，让其中的引用变量指向另一个对象，另一个引用变量依然指向前一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-keyword">let</span> b = a;<br>a = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;BOB&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;;<br>b.<span class="hljs-property">age</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>, b.<span class="hljs-property">name</span>, a.<span class="hljs-property">age</span>); <span class="hljs-comment">//6 undefined  20</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">obj</span>) &#123;<br>    obj = &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;<br>&#125;<br><span class="hljs-title function_">f2</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">age</span>);<span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><h3 id="js传递变量参数时，是值传递还是引用传递？"><a href="#js传递变量参数时，是值传递还是引用传递？" class="headerlink" title="js传递变量参数时，是值传递还是引用传递？"></a>js传递变量参数时，是值传递还是引用传递？</h3><p>可能是值传递，也有可能是引用传递（地址值）也可以理解为都是值传递（基本值传递，地址值传递）</p><h3 id="js引擎如何进行内存管理"><a href="#js引擎如何进行内存管理" class="headerlink" title="js引擎如何进行内存管理"></a>js引擎如何进行内存管理</h3><p>释放内存：</p><p>局部变量：函数执行完以后自动释放；</p><p>对象：先成为垃圾对象&#x3D;&#x3D;》然后被垃圾回收器回收</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="什么是对象？为什么用"><a href="#什么是对象？为什么用" class="headerlink" title="什么是对象？为什么用"></a>什么是对象？为什么用</h3><p>拥有属性和方法的数据，用来保存多个数据的容器</p><p>统一管理多个数据</p><p>方法是特殊的属性&#x3D;&#x3D;》属性值是函数</p><h4 id="对象使用中什么时候必须使用-“属性名”-？"><a href="#对象使用中什么时候必须使用-“属性名”-？" class="headerlink" title="对象使用中什么时候必须使用[“属性名”]？"></a>对象使用中什么时候必须使用[“属性名”]？</h4><p>1属性名中包含特殊字符：- 空格</p><p>2属性名不确定</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>是什么？可以执行，实现一定功能的封装体 </p><p>为什么？提高代码的复用，便于阅读</p><p>怎么封装？函数声明，表达式</p><h4 id="什么函数是回调函数？"><a href="#什么函数是回调函数？" class="headerlink" title="什么函数是回调函数？"></a>什么函数是回调函数？</h4><p>1你定义的</p><p>2你没有调</p><p>3最终它执行了</p><p>常见回调函数&#x3D;&#x3D;&#x3D;&gt;dom事件回调函数，定时器</p><h3 id="IIFE函数"><a href="#IIFE函数" class="headerlink" title="IIFE函数"></a>IIFE函数</h3><p>匿名自调用函数（立即调用函数表达式）</p><p>作用：隐藏实现，不会污染全局命名空间，用它来编写js模块</p><h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h3><p>如果没有指定就是指window</p><p>所有函数内部都有一个变量this</p><p>它的值是调用函数的当前对象</p><h4 id="如何确定this的值？"><a href="#如何确定this的值？" class="headerlink" title="如何确定this的值？"></a>如何确定this的值？</h4><p>test()指window</p><p>p.test()指p</p><p>new test（）指新建的对象</p><p>p.call(obj)：obj</p>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/18/Nodejs/"/>
    <url>/2022/03/18/Nodejs/</url>
    
    <content type="html"><![CDATA[<h1 id="学习Nodejs总结"><a href="#学习Nodejs总结" class="headerlink" title="学习Nodejs总结"></a>学习Nodejs总结</h1><span id="more"></span><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><h4 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h4><p>3个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="fs-writeFile"><a href="#fs-writeFile" class="headerlink" title="fs.writeFile"></a>fs.writeFile</h4><p>3个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&quot;./files/2.txt&quot;</span>, <span class="hljs-string">&quot;正在努力中....&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入失败&quot;</span> + err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入成功&quot;</span> + dataStr);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><h4 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a>path.join</h4><p>拼接地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><br>fs.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;/files/1.txt&#x27;</span>), <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span>;<br><span class="hljs-comment">// const Npath = path.basename(fpath);</span><br><span class="hljs-comment">// console.log(Npath); //index.html</span><br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Npath</span> = path.<span class="hljs-title function_">basename</span>(fpath, <span class="hljs-string">&#x27;.html&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Npath</span>); <span class="hljs-comment">//index</span><br></code></pre></td></tr></table></figure><h4 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Npath</span> = path.<span class="hljs-title function_">extname</span>(fpath);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Npath</span>); <span class="hljs-comment">//.html</span><br></code></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="req-amp-amp-res"><a href="#req-amp-amp-res" class="headerlink" title="req&amp;&amp;res"></a>req&amp;&amp;res</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br>http.<span class="hljs-title function_">createServer</span>().<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req的url和method可以分别获取地址和请求类型</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`你的请求地址是<span class="hljs-subst">$&#123;req.url&#125;</span>,请求类型是<span class="hljs-subst">$&#123;req.method&#125;</span>`</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>    <span class="hljs-comment">// 出现中文乱码解决</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27; text/html;charset=utf-8&#x27;</span>)<br>        <span class="hljs-comment">// res.end向服务器响应一些内容，在页面中展示</span><br>    res.<span class="hljs-title function_">end</span>(str)<br><br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动127.0.0.1：8080！！&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>res.end也很重要</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h4 id="nrm-和i5ting-toc"><a href="#nrm-和i5ting-toc" class="headerlink" title="nrm,和i5ting_toc"></a>nrm,和i5ting_toc</h4><p>安装导入功能开源协议ISC</p><p>npm login</p><p>npm publish</p><p>npm unpublish baoming –force</p><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p>安装express命令 npm install <a href="mailto:&#x65;&#x78;&#112;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#46;&#49;&#x37;&#46;&#x31;">&#x65;&#x78;&#112;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#46;&#49;&#x37;&#46;&#x31;</a></p><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>安装命令npm install nodemon -g</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 定义一个全局中间件</span><br><span class="hljs-comment">// 中间件作用： 可以共享同一份req和res</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全局中间件执行了&quot;</span>);<br>    <span class="hljs-comment">// 把流转关系转交给下一个中间件或路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get /&quot;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get user&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get user&quot;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>后面中间件或者路由都能拿到共享数据req，和res</p><h4 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// 局部中间件不使用app.use()</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw1</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;局部中间件执行了第一个&quot;</span>);<br>    <span class="hljs-comment">// 调用next传给下个中间件或者路由</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw2</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;局部中间件执行了第二个&quot;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get /&quot;</span>);<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, mw1, mw2, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get user&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了这个路由get user&quot;</span>);<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h4><p>必须注册在所有路由之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;服务器内部发生了错误！&quot;</span>)<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;get /&quot;</span>);<br>&#125;)<br>/必须注册在所有路由之后<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发生了错误&quot;</span> + err.<span class="hljs-property">message</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;error&quot;</span> + err.<span class="hljs-property">message</span>)<br>&#125;)<br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is ruynning&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-comment">// 使用内置中间件，可以解析json格式的数据 </span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><br><span class="hljs-comment">// 使用另一个内置中间件可以解析URL - encoded格式的请求体数据</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><h4 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用第三方组件先安装再导入</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>)<br>    <span class="hljs-comment">// 使用</span><br>app.<span class="hljs-title function_">use</span>(parser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br></code></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><h4 id="使用cors解决跨域"><a href="#使用cors解决跨域" class="headerlink" title="使用cors解决跨域"></a>使用cors解决跨域</h4><p>npm install cors</p><p>导入中间件</p><p>一定在路由之前使用app.use(cors（）)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br><span class="hljs-comment">// 配置解析表单数据的中间件</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br><span class="hljs-comment">// 一定要在路由之前进行配置，解决跨域问题</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br><br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./26appRouter&#x27;</span>)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, router)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is running&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="简单请求和遇见请求区别"><a href="#简单请求和遇见请求区别" class="headerlink" title="简单请求和遇见请求区别"></a>简单请求和遇见请求区别</h4><p>简单请求只会发生一次请求</p><p>遇见请求客户端与服务器发生2次请求OPTION请求成功以后才会发起真正的请求</p><h3 id="jwt认证机制"><a href="#jwt认证机制" class="headerlink" title="jwt认证机制"></a>jwt认证机制</h3><p>npm i jsonwebtoken express-jwt</p>]]></content>
    
    
    <categories>
      
      <category>Nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
